This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-05T23:59:50.366Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================

default_bus_layout.tres
icon.svg
icon.svg.import
project.godot
scenes/component/bullet_spawner.gd
scenes/component/bullet_spawner.tscn
scenes/component/health_component.gd
scenes/component/health_component.tscn
scenes/component/hitbox.gd
scenes/component/hitbox.tscn
scenes/component/hurtbox.gd
scenes/component/hurtbox.tscn
scenes/component/offscreen_despawner_component.gd
scenes/component/offscreen_despawner_component.tscn
scenes/component/on_death_component.gd
scenes/component/on_death_component.tscn
scenes/component/on_signal_spawner_component.gd
scenes/component/on_signal_spawner_component.tscn
scenes/component/pilot/label_2.gd
scenes/component/pilot/label.gd
scenes/component/pilot/npc_pilot.gd
scenes/component/pilot/npc_pilot.tscn
scenes/component/pilot/pilot.gd
scenes/component/pilot/pilot.tscn
scenes/component/pilot/player_pilot.gd
scenes/component/pilot/player_pilot.tscn
scenes/component/pilot/player_pilot.tscn110144896532.tmp
scenes/component/random_stream_player_component.gd
scenes/component/random_stream_player_component.tscn
scenes/component/target_area.gd
scenes/component/target_area.tscn
scenes/component/targeting/target.gd
scenes/component/velocity_component.gd
scenes/component/velocity_component.tscn
scenes/csg_mesh_3d.gd
scenes/csg_mesh_3d.tscn
scenes/game_object/npc_ship.tscn430872673.tmp
scenes/game_object/projectile/projectile_mesh.tres
scenes/game_object/projectile/projectile_server.gd
scenes/game_object/projectile/projectile.gd
scenes/game_object/projectile/projectile.tscn
scenes/game_object/ship_camera/camera_rig.gd
scenes/game_object/ship_camera/camera_rig.tscn
scenes/game_object/ship_camera/crosshair.gd
scenes/game_object/ship/npc_ship.tscn
scenes/game_object/ship/player_ship.tscn
scenes/game_object/ship/ship_input.gd
scenes/game_object/ship/ship_physics.gd
scenes/game_object/ship/ship.gd
scenes/game_object/ship/ship.tscn
scenes/game_object/ship/ship.tscn96267177929.tmp
scenes/game_object/ship/ship.tscn98035510277.tmp
scenes/game_object/ship/ship.tscn98050940527.tmp
scenes/game_object/ship/test_data.tres
scenes/game_object/ship/thrust.gdshader
scenes/game_object/vfx/death_explosion.gd
scenes/game_object/vfx/death_explosion.tscn
scenes/game_object/vfx/hit_explosion.gd
scenes/game_object/vfx/hit_explosion.tscn
scenes/game_object/vfx/test_thrust.tscn
scenes/game_object/weapons/gun.gd
scenes/game_object/weapons/gun.tscn
scenes/game_object/weapons/laser_gun.gd
scenes/game_object/weapons/laser_gun.tscn
scenes/test_hitbox.gd
scenes/test_scene.gd
scenes/test_scene.tscn
scenes/test_scene.tscn113278277755.tmp
scenes/test_scene.tscn8229259060.tmp
scenes/test_scene.tscn87138360955.tmp
scripts/pid.gd
scripts/proj_data.gd
scripts/ship_data.gd
scripts/Util.gd

================================================================
Repository Files
================================================================

================
File: .editorconfig
================

================
File: assets/sounds/zapsplat_science_fiction_weapon_cannon_shoot_blast_89849.mp3.import
================
[remap]

importer="mp3"
type="AudioStreamMP3"
uid="uid://hkapd2neaq7h"
path="res://.godot/imported/zapsplat_science_fiction_weapon_cannon_shoot_blast_89849.mp3-caab2cdd65d8d9e790d8be2feb82f2c3.mp3str"

[deps]

source_file="res://assets/sounds/zapsplat_science_fiction_weapon_cannon_shoot_blast_89849.mp3"
dest_files=["res://.godot/imported/zapsplat_science_fiction_weapon_cannon_shoot_blast_89849.mp3-caab2cdd65d8d9e790d8be2feb82f2c3.mp3str"]

[params]

loop=false
loop_offset=0
bpm=0
beat_count=0
bar_beats=4

================
File: default_bus_layout.tres
================
[gd_resource type="AudioBusLayout" format=3 uid="uid://bpfyk74rygtyr"]

[resource]
bus/1/name = &"sfx"
bus/1/solo = false
bus/1/mute = false
bus/1/bypass_fx = false
bus/1/volume_db = 0.0
bus/1/send = &"Master"
bus/2/name = &"music"
bus/2/solo = false
bus/2/mute = false
bus/2/bypass_fx = false
bus/2/volume_db = 0.0
bus/2/send = &"Master"

================
File: icon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" width="128" height="128"><rect width="124" height="124" x="2" y="2" fill="#363d52" stroke="#212532" stroke-width="4" rx="14"/><g fill="#fff" transform="translate(12.322 12.322)scale(.101)"><path d="M105 673v33q407 354 814 0v-33z"/><path fill="#478cbf" d="m105 673 152 14q12 1 15 14l4 67 132 10 8-61q2-11 15-15h162q13 4 15 15l8 61 132-10 4-67q3-13 15-14l152-14V427q30-39 56-81-35-59-83-108-43 20-82 47-40-37-88-64 7-51 8-102-59-28-123-42-26 43-46 89-49-7-98 0-20-46-46-89-64 14-123 42 1 51 8 102-48 27-88 64-39-27-82-47-48 49-83 108 26 42 56 81zm0 33v39c0 276 813 276 814 0v-39l-134 12-5 69q-2 10-14 13l-162 11q-12 0-16-11l-10-65H446l-10 65q-4 11-16 11l-162-11q-12-3-14-13l-5-69z"/><path d="M483 600c0 34 58 34 58 0v-86c0-34-58-34-58 0z"/><circle cx="725" cy="526" r="90"/><circle cx="299" cy="526" r="90"/></g><g fill="#414042" transform="translate(12.322 12.322)scale(.101)"><circle cx="307" cy="532" r="60"/><circle cx="717" cy="532" r="60"/></g></svg>

================
File: icon.svg.import
================
[remap]

importer="texture"
type="CompressedTexture2D"
uid="uid://da1ou17wqfwl2"
path="res://.godot/imported/icon.svg-218a8f2b3041327d8a5756f3a245f83b.ctex"
metadata={
"vram_texture": false
}

[deps]

source_file="res://icon.svg"
dest_files=["res://.godot/imported/icon.svg-218a8f2b3041327d8a5756f3a245f83b.ctex"]

[params]

compress/mode=0
compress/high_quality=false
compress/lossy_quality=0.7
compress/hdr_compression=1
compress/normal_map=0
compress/channel_pack=0
mipmaps/generate=false
mipmaps/limit=-1
roughness/mode=0
roughness/src_normal=""
process/fix_alpha_border=true
process/premult_alpha=false
process/normal_map_invert_y=false
process/hdr_as_srgb=false
process/hdr_clamp_exposure=false
process/size_limit=0
detect_3d/compress_to=1
svg/scale=1.0
editor/scale_with_editor_scale=false
editor/convert_colors_with_editor_theme=false

================
File: project.godot
================
; Engine configuration file.
; It's best edited using the editor UI and not directly,
; since the parameters that go here are not all obvious.
;
; Format:
;   [section] ; section goes between []
;   param=value ; assign values to parameters

config_version=5

[application]

config/name="Space Ships"
run/main_scene="res://scenes/test_scene.tscn"
config/features=PackedStringArray("4.4", "Forward Plus")
config/icon="res://icon.svg"

[autoload]

ProjectileServer="*res://scenes/game_object/projectile/projectile_server.gd"

[debug]

gdscript/warnings/untyped_declaration=2

[display]

window/size/viewport_width=1280
window/size/viewport_height=800

[dotnet]

project/assembly_name="Space"

[editor]

movie_writer/movie_file="F:/GameDev/fleetsurvivors/movie/test.avi"

[global_group]

target="Every Pilot belongs to this group"

[input]

move_left={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":65,"key_label":0,"unicode":97,"location":0,"echo":false,"script":null)
]
}
move_right={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":68,"key_label":0,"unicode":100,"location":0,"echo":false,"script":null)
]
}
move_forward={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":87,"key_label":0,"unicode":119,"location":0,"echo":false,"script":null)
]
}
move_backward={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":83,"key_label":0,"unicode":115,"location":0,"echo":false,"script":null)
]
}
scroll_up={
"deadzone": 0.5,
"events": [Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":4,"canceled":false,"pressed":false,"double_click":false,"script":null)
]
}
scroll_down={
"deadzone": 0.5,
"events": [Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":5,"canceled":false,"pressed":false,"double_click":false,"script":null)
]
}
shoot={
"deadzone": 0.5,
"events": [Object(InputEventMouseButton,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"button_mask":0,"position":Vector2(0, 0),"global_position":Vector2(0, 0),"factor":1.0,"button_index":1,"canceled":false,"pressed":false,"double_click":false,"script":null)
]
}
target={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":82,"key_label":0,"unicode":114,"location":0,"echo":false,"script":null)
]
}
dash={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":4194325,"key_label":0,"unicode":0,"location":0,"echo":false,"script":null)
]
}
drift={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":32,"key_label":0,"unicode":32,"location":0,"echo":false,"script":null)
]
}
cut_throttle={
"deadzone": 0.5,
"events": [Object(InputEventKey,"resource_local_to_scene":false,"resource_name":"","device":-1,"window_id":0,"alt_pressed":false,"shift_pressed":false,"ctrl_pressed":false,"meta_pressed":false,"pressed":false,"keycode":0,"physical_keycode":88,"key_label":0,"unicode":120,"location":0,"echo":false,"script":null)
]
}

[layer_names]

2d_physics/layer_2="Player"
2d_physics/layer_3="Enemy"
2d_physics/layer_4="Pickup"
3d_physics/layer_4="Hitboxes"

[physics]

3d/default_gravity=0.0
common/physics_interpolation=true

[rendering]

textures/canvas_textures/default_texture_filter=0
viewport/hdr_2d=true

================
File: scenes/component/bullet_spawner.gd
================
class_name BulletSpawner extends Node3D

@export var fire_rate: float = 0.1
@export var spread: float = 0.0
@export var proj_speed: int = 1000
@export var projectile_scene: PackedScene


func spawn_projectile(towards:Transform3D = global_transform) -> void:
		var main: Node = get_tree().current_scene
		
		var projectile: Projectile = (projectile_scene.instantiate() as Projectile)
		projectile.global_transform = towards
		main.add_child(projectile)
		projectile.velocity_component.velocity = - proj_speed * towards.basis.z

================
File: scenes/component/bullet_spawner.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://gep8kx3gilo"]

[ext_resource type="Script" path="res://scenes/component/bullet_spawner.gd" id="1_syekn"]

[node name="BulletSpawner" type="Node3D"]
script = ExtResource("1_syekn")
proj_speed = 750

================
File: scenes/component/health_component.gd
================
extends Node
class_name HealthComponent

signal died(thing_died: Node)
signal health_changed
signal health_decreased

 
@export var max_health: int = 10
var current_health: int


func _ready() -> void:
	current_health = max_health
	
func damage(damage_amount:int) -> void:
	current_health = clamp(current_health - damage_amount,0,max_health)
	health_changed.emit()
	if damage_amount > 0:
		health_decreased.emit()
	check_death.call_deferred()
	
func heal(heal_amount: int) -> void:
	damage(-heal_amount)
	
func check_death() -> void:
	if current_health == 0:
		died.emit(owner)
		owner.queue_free()
		#maybe just queuefree here, maybe do other stuff

func get_health_percent() -> float:
	if max_health <= 0:
		return 0

	return min((current_health as float) / (max_health as float),1)
	
func set_max_health(new_hp: int) -> void:
	var current_percent: float = get_health_percent()
	max_health = new_hp
	current_health = max_health * current_percent

================
File: scenes/component/health_component.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://dmtst8fnji83l"]

[ext_resource type="Script" path="res://scenes/component/health_component.gd" id="1_bsl3c"]

[node name="HealthComponent" type="Node"]
script = ExtResource("1_bsl3c")

================
File: scenes/component/hitbox.gd
================
class_name Hitbox extends Area3D

signal hit(thing_hit: Node3D)

@export var damage: int = 0

#func set_hitbox

================
File: scenes/component/hitbox.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://b6ccgjx8qg12h"]

[ext_resource type="Script" path="res://scenes/component/hitbox.gd" id="1_34xm6"]

[node name="Hitbox" type="Area3D"]
monitoring = false
script = ExtResource("1_34xm6")

[connection signal="hit" from="." to="." method="_on_hit"]

================
File: scenes/component/hurtbox.gd
================
class_name Hurtbox extends Area3D

signal hit

@export var health_component: HealthComponent



func _on_area_entered(area: Area3D) -> void:
	if not area is Hitbox:
		return
	if health_component == null:
		return
	
	var hitbox: Hitbox = (area as Hitbox)
	
	health_component.damage(hitbox.damage)
	hitbox.hit.emit(self)
	hit.emit()


func _on_body_shape_entered(body_rid: RID, body: Node3D, body_shape_index: int, local_shape_index: int) -> void:
	var proj_data: ProjectileData = ProjectileServer.get_proj_data_from_rid(body_rid)
	if proj_data == null:
		return
	if health_component == null:
		return
	print("yippee!")
	hit.emit()
	health_component.damage(proj_data.damage)

================
File: scenes/component/hurtbox.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://b8ha4ultrkxnb"]

[ext_resource type="Script" path="res://scenes/component/hurtbox.gd" id="1_emwd2"]

[node name="Hurtbox" type="Area3D"]
collision_layer = 12
collision_mask = 12
input_ray_pickable = false
monitorable = false
script = ExtResource("1_emwd2")

[connection signal="area_entered" from="." to="." method="_on_area_entered"]
[connection signal="body_shape_entered" from="." to="." method="_on_body_shape_entered"]

================
File: scenes/component/offscreen_despawner_component.gd
================
extends VisibleOnScreenNotifier3D

@onready var timer: Timer = $Timer

func _on_timer_timeout() -> void:
	owner.queue_free()


func _on_screen_exited() -> void:
	timer.start()

================
File: scenes/component/offscreen_despawner_component.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://ej01lxfiew2b"]

[ext_resource type="Script" path="res://scenes/component/offscreen_despawner_component.gd" id="1_6hdqm"]

[node name="OffscreenDespawnerComponent" type="VisibleOnScreenNotifier3D"]
script = ExtResource("1_6hdqm")

[node name="Timer" type="Timer" parent="."]
one_shot = true

[connection signal="screen_exited" from="." to="." method="_on_screen_exited"]
[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]

================
File: scenes/component/on_death_component.gd
================
extends Node3D

@export var health_component: HealthComponent
@export var on_death_scene: PackedScene

func _ready() -> void:
	health_component.died.connect(on_death)
	
func on_death(_thing: Node) -> void:
	if on_death_scene == null:
		return
	var to_add: Node3D = on_death_scene.instantiate()
	var main:= get_tree().current_scene
	to_add.position = global_position
	main.add_child(to_add)

================
File: scenes/component/on_death_component.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://42ed8d4svbt3"]

[ext_resource type="Script" path="res://scenes/component/on_death_component.gd" id="1_trvkv"]

[node name="OnDeathComponent" type="Node3D"]
script = ExtResource("1_trvkv")

================
File: scenes/component/on_signal_spawner_component.gd
================
class_name OnSignalSpawnerComponent extends Node3D

@export var on_signal_scene: PackedScene
	
func on_signal(_thing: Node) -> void:
	if on_signal_scene == null:
		return
	var to_add: Node3D = on_signal_scene.instantiate()
	var main:= get_tree().current_scene
	to_add.position = global_position
	main.add_child(to_add)

================
File: scenes/component/on_signal_spawner_component.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://l5w22dde6bj4"]

[ext_resource type="Script" path="res://scenes/component/on_signal_spawner_component.gd" id="1_opgqq"]

[node name="OnSignalSpawnerComponent" type="Node3D"]
script = ExtResource("1_opgqq")

================
File: scenes/component/pilot/label_2.gd
================
extends Label

func _process(delta: float) -> void:
	text = "Active Projectiles: %d" % ProjectileServer.active_projectiles.size()

================
File: scenes/component/pilot/label.gd
================
extends Label

func _process(delta: float) -> void:
	text = "FPS: %d" % Engine.get_frames_per_second()

================
File: scenes/component/pilot/npc_pilot.gd
================
class_name NPCPilot extends Pilot

var think_counter: float = 0
var think_delay: float
@export var fire_chance: float = 0.4

@onready var preferred_avoid: Vector3 = Util.uniform_random_vector() * 200
@onready var rand_seed: int = randi_range(0,1000)

var target: Pilot
var potential_targets: Array[Node3D] = []

var noise: FastNoiseLite = FastNoiseLite.new()

func _ready() -> void:
	noise.seed = rand_seed
	noise.noise_type = FastNoiseLite.TYPE_PERLIN
	
func _process(delta: float) -> void:
	think_counter +=delta
	run_targeting()
	dogfight(delta)
	if is_firing:
		weapon.shoot()
	
func is_fire_allowed() -> bool:
	var noise_value: float = (noise.get_noise_1d(rand_seed + Time.get_ticks_msec()) + 1) / 2
	return noise_value < fire_chance

func dogfight(delta: float) -> void:
	if target == null:
		is_firing = false
		return
	var distance: float = global_position.distance_to(target.global_position)
	if distance < 100:
		turn_towards_point(target.global_position + preferred_avoid, delta)
		throttle = 0.4
		is_firing = false
	else:
		#var relative_pos: Vector3 = own_ship.global_position - target.own_ship.global_position
		#var relative_vel: Vector3 = own_ship.linear_velocity - target.own_ship.linear_velocity
		#var lead_time: float = Util.calculate_lead(relative_pos,relative_vel,-weapon.bullet_spawner.proj_speed)
		#var target_point: Vector3 = target.global_position + (target.own_ship.linear_velocity * lead_time)
		var target_point: Vector3 = Util.calculate_lead(own_ship,target.own_ship,weapon.bullet_spawner.proj_speed)

		var turn_strength: float = (noise.get_noise_1d(rand_seed + Time.get_ticks_msec()) + 1) / 2
		turn_towards_point(target_point, delta, turn_strength)
		var angle_to_target: float = -global_basis.z.angle_to(target_point)
		
		is_firing = angle_to_target < 0.1 && is_fire_allowed() && distance < 400
		if (-global_basis.z).angle_to(-target.global_basis.z) < 90:
			throttle = clamp(remap(distance,50,1500,6,.8),.33,.9)
			#throttle = 0.8
		else:
			throttle = 0.85

func run_targeting() -> void:
	if think_counter > think_delay:
		think_delay = randf_range(1,2)
		if target == null:
			target = get_target()


func get_target() -> Pilot:
	potential_targets.clear()
	for tar in get_tree().get_nodes_in_group("target"):
		var current_target: Pilot = tar as Pilot
		if current_target.faction != faction:
			potential_targets.append(current_target)
	return potential_targets.pick_random() if potential_targets.size() > 0 else null

================
File: scenes/component/pilot/npc_pilot.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://skf788cyrcng"]

[ext_resource type="Script" path="res://scenes/component/pilot/npc_pilot.gd" id="1_c1qid"]

[node name="NpcPilot" type="Node3D" groups=["target"]]
script = ExtResource("1_c1qid")

[node name="RayCast3D" type="RayCast3D" parent="."]

================
File: scenes/component/pilot/pilot.gd
================
class_name Pilot extends Node3D

@export var bank_limit: float = deg_to_rad(50)

var pitch: float
var yaw: float
var roll: float
var strafe: float
var throttle: float


@export var pitch_pid_params: Vector3 = Vector3(1.5, 1, 0.5)
@export var yaw_pid_params: Vector3 = Vector3(1.5, 1, 0.5)
@export var roll_pid_params: Vector3 = Vector3(0.7, 0.5, 1.0)


var pitch_pid: PID = PID.new(pitch_pid_params.x, pitch_pid_params.y, pitch_pid_params.z)
var yaw_pid: PID = PID.new(yaw_pid_params.x, yaw_pid_params.y, yaw_pid_params.z)
var roll_pid: PID = PID.new(roll_pid_params.x, roll_pid_params.y, roll_pid_params.z)

@export var throttle_speed: float = 0.5

enum FACTION {FRIENDLY, ENEMY}
@export var faction: FACTION
@export var own_ship: RigidBody3D
@export var weapon: Node3D

var is_firing: bool = false


func bank_ship_relative_to_up(mouse_pos: Vector2, up: Vector3, delta:float) -> void:
	var bank_influence: float = (mouse_pos.x - (get_viewport().size.x * 0.5)) / (get_viewport().size.x * 0.5)
	bank_influence = clampf(bank_influence,-1,1)
	bank_influence *= throttle
	
	var bank_target: float = - bank_influence * bank_limit
	var bank_current: float = global_transform.basis.y.signed_angle_to(up, -global_transform.basis.z)
	var bank: float = roll_pid.update(bank_target, bank_current, delta)
	bank = clampf(bank, -1,1)
	
	roll = bank



func turn_towards_point(to: Vector3, delta: float, turn_strength: float = 1) -> void:
	var local_to: Vector3 = to_local(to).normalized()
	pitch = clampf(pitch_pid.update(0, -local_to.y, delta), -1, 1) * turn_strength
	yaw = clampf(yaw_pid.update(0, local_to.x, delta), -1,1) * turn_strength


func set_faction(new_faction: FACTION) -> void:
	faction = new_faction

================
File: scenes/component/pilot/pilot.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://dt2e2yt546nhh"]

[ext_resource type="Script" path="res://scenes/component/pilot/pilot.gd" id="1_gv36t"]

[node name="Pilot" type="Node3D" groups=["target"]]
script = ExtResource("1_gv36t")

================
File: scenes/component/pilot/player_pilot.gd
================
class_name PlayerPilot extends Pilot

@onready var throt: ProgressBar = $CanvasLayer/ProgressBar
@onready var dash_bar: ProgressBar = $CanvasLayer/ProgressBar2
@onready var target_cast: RayCast3D = $RayCast3D
@onready var target_indicator: Sprite3D = $TargetIndicator
@onready var lead_crosshair: Sprite3D = $TargetIndicator/LeadCrosshair
@onready var target_cam: Node3D = $CanvasLayer/Control/Control/SubViewportContainer/SubViewport/TargetCam
@onready var target_cam_pivot: Node3D = $CanvasLayer/Control/Control/SubViewportContainer/SubViewport/TargetCam/Pivot
@onready var target_hp_bar: ProgressBar =$CanvasLayer/Control/Control/TargetHPBar

var target: RigidBody3D = null
var dash_meter: float = 1
var dash_rate: float = 0.5
var dash_speed: float = 2
enum STATE {BASE,DASHING,DRIFT}
var current_state: STATE = STATE.BASE

@export var crosshair_radius: float = 50
@export var crosshair_hit: bool = false

func _process(delta: float) -> void:
	strafe = Input.get_axis("move_left","move_right")
	
	auto_pilot(delta)
	update_throttle(delta)
	update_target_indicator()



func auto_pilot(delta:float) -> void:
	var camera: Camera3D = get_viewport().get_camera_3d()
	var mouse_pos: Vector2 = get_viewport().get_mouse_position()
	var world_pos: Vector3 = camera.project_position(mouse_pos, 1000)
	
	turn_towards_point(world_pos, delta)
	bank_ship_relative_to_up(mouse_pos,camera.global_basis.y, delta)
	if Input.is_action_pressed("shoot"):
		shoot()
	if Input.is_action_just_pressed("target"):
		find_target(world_pos)

func update_throttle(delta: float) -> void:
	var throttle_target: float = throttle
	if Input.is_action_pressed("move_forward"):
		throttle_target = 1
	elif Input.is_action_pressed("move_backward"):
		throttle_target = -.2
	
	throttle = move_toward(throttle, throttle_target, throttle_speed * delta)
	if Input.is_action_just_pressed("cut_throttle"):
		throttle = 0
	throt.value = throttle

func find_target(mouse_direction: Vector3) -> void:
	target_cast.target_position = to_local(mouse_direction)
	target_cast.force_raycast_update()
	if target_cast.is_colliding():
		#if target != null:
			#(target.mesh as MeshInstance3D).set_layer_mask_value(2, true)
			#(target.mesh as MeshInstance3D).set_layer_mask_value(3, false)
		target = (target_cast.get_collider() as TargetArea).ship

		
func update_target_indicator() -> void:
	if target != null:
		#target_indicator.visible = not get_viewport().get_camera_3d().is_position_behind(global_transform.origin)
		target_hp_bar.value = target.hp.get_health_percent()
		target_indicator.global_position = target.global_position
		target_indicator.visible = true
		
		#var relative_pos: Vector3 = own_ship.global_position - target.global_position
		#var relative_vel: Vector3 = own_ship.linear_velocity - target.linear_velocity
		#var lead_time: float = Util.calculate_lead(relative_pos,relative_vel,-weapon.bullet_spawner.proj_speed)
		var lead_pos: Vector3 = Util.calculate_lead(own_ship,target,weapon.bullet_spawner.proj_speed)
		#var world_pos: Vector3 = target.global_position + (target.linear_velocity * lead_time)
		lead_crosshair.global_position = lead_pos
		
		
		target_cam.global_position = target.global_position
		var camera: Camera3D = get_viewport().get_camera_3d()
		target_cam_pivot.position = (camera.global_position - target_cam.global_position).normalized() * 20
		target_cam_pivot.look_at(target_cam.global_position,camera.global_basis.y)
	else:
		target_hp_bar.value = 0
		target_indicator.visible = false

func shoot() -> void:
	var aim_point: Vector3 = get_aim_point()
	weapon.shoot_towards(aim_point)

func get_screen_position(world_pos: Vector3) -> Vector2:
	var camera: Camera3D = get_viewport().get_camera_3d()
	return camera.unproject_position(world_pos)
	
func is_within_crosshair(screen_pos: Vector2, mouse_pos: Vector2) -> bool:
	return screen_pos.distance_to(mouse_pos) < crosshair_radius
	
func get_aim_point() -> Vector3:
	var camera: Camera3D = get_viewport().get_camera_3d()
	var mouse_pos: Vector2 = get_viewport().get_mouse_position()
	var aim_distance: float = 500
	crosshair_hit = false
	
	if target != null && camera.is_position_in_frustum(target.global_position):
		#var lead_screen_pos: Vector2 = get_screen_position(lead_crosshair.global_position)
		aim_distance = camera.global_position.distance_to(lead_crosshair.global_position)
		#if is_within_crosshair(lead_screen_pos, mouse_pos):
			#crosshair_hit = true
			#return lead_crosshair.global_position
		
			
	return camera.project_position(mouse_pos, aim_distance)

================
File: scenes/component/pilot/player_pilot.tscn
================
[gd_scene load_steps=7 format=3 uid="uid://rjscsifxkuxr"]

[ext_resource type="Script" path="res://scenes/component/pilot/player_pilot.gd" id="1_eqnf8"]
[ext_resource type="Script" path="res://scenes/component/pilot/label.gd" id="2_t8iha"]
[ext_resource type="Texture2D" uid="uid://b66y3vyxcj7jd" path="res://assets/MouseCrosshair.png" id="3_tef56"]
[ext_resource type="Script" path="res://scenes/component/pilot/label_2.gd" id="3_wtqsc"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_rpb2h"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_17b7h"]
bg_color = Color(1, 0, 0, 1)

[node name="PlayerPilot" type="Node3D" groups=["target"]]
script = ExtResource("1_eqnf8")
pitch_pid_params = Vector3(1.5, 0.75, 0.5)
yaw_pid_params = Vector3(1.5, 0.75, 0.5)
roll_pid_params = Vector3(3, 0.5, 0.5)

[node name="CanvasLayer" type="CanvasLayer" parent="."]
follow_viewport_enabled = true

[node name="ProgressBar" type="ProgressBar" parent="CanvasLayer"]
offset_left = 612.0
offset_top = 628.0
offset_right = 686.0
offset_bottom = 655.0
max_value = 1.0
allow_greater = true
allow_lesser = true

[node name="VBoxContainer" type="VBoxContainer" parent="CanvasLayer"]
visible = false
offset_left = 1037.0
offset_top = 310.0
offset_right = 1077.0
offset_bottom = 387.0

[node name="Yaw" type="Label" parent="CanvasLayer/VBoxContainer"]
layout_mode = 2

[node name="Roll" type="Label" parent="CanvasLayer/VBoxContainer"]
layout_mode = 2

[node name="Pitch" type="Label" parent="CanvasLayer/VBoxContainer"]
layout_mode = 2

[node name="ProgressBar2" type="ProgressBar" parent="CanvasLayer"]
offset_left = 583.0
offset_top = 732.0
offset_right = 714.0
offset_bottom = 759.0
max_value = 1.0

[node name="Control" type="Control" parent="CanvasLayer"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Control" type="Control" parent="CanvasLayer/Control"]
layout_mode = 1
anchor_left = 0.099
anchor_top = 0.733
anchor_right = 0.301
anchor_bottom = 1.0
offset_right = -0.560028
offset_bottom = 0.399963

[node name="SubViewportContainer" type="SubViewportContainer" parent="CanvasLayer/Control/Control"]
clip_contents = true
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="SubViewport" type="SubViewport" parent="CanvasLayer/Control/Control/SubViewportContainer"]
transparent_bg = true
handle_input_locally = false
debug_draw = 4
canvas_cull_mask = 4293918722
size = Vector2i(256, 128)
render_target_update_mode = 4

[node name="TargetCam" type="Node3D" parent="CanvasLayer/Control/Control/SubViewportContainer/SubViewport"]

[node name="Pivot" type="Node3D" parent="CanvasLayer/Control/Control/SubViewportContainer/SubViewport/TargetCam"]

[node name="Camera3D" type="Camera3D" parent="CanvasLayer/Control/Control/SubViewportContainer/SubViewport/TargetCam/Pivot"]
cull_mask = 4
fov = 60.0
near = 1.0
far = 10000.0

[node name="TargetHPBar" type="ProgressBar" parent="CanvasLayer/Control/Control"]
layout_mode = 1
anchors_preset = -1
anchor_right = 1.0
anchor_bottom = 0.115
offset_bottom = -0.36
theme_override_styles/background = SubResource("StyleBoxFlat_rpb2h")
theme_override_styles/fill = SubResource("StyleBoxFlat_17b7h")
max_value = 1.0
value = 1.0
show_percentage = false

[node name="Label" type="Label" parent="CanvasLayer/Control"]
layout_mode = 1
anchors_preset = -1
anchor_left = 0.059
anchor_top = 0.103
anchor_right = 0.205
anchor_bottom = 0.103
offset_right = 40.0
offset_bottom = 23.0
text = "FPS:"
script = ExtResource("2_t8iha")

[node name="Label2" type="Label" parent="CanvasLayer/Control"]
layout_mode = 1
anchors_preset = -1
anchor_left = 0.059
anchor_top = 0.103
anchor_right = 0.205
anchor_bottom = 0.103
offset_left = -15.52
offset_top = 50.6
offset_right = 24.48
offset_bottom = 73.6
text = "Active Projectiles: "
script = ExtResource("3_wtqsc")

[node name="RayCast3D" type="RayCast3D" parent="."]
enabled = false
target_position = Vector3(0, 0, 0)
collision_mask = 16
collide_with_areas = true
collide_with_bodies = false

[node name="TargetIndicator" type="Sprite3D" parent="."]
transform = Transform3D(50, 0, 0, 0, 50, 0, 0, 0, 50, 0, 0, 0)
modulate = Color(1, 0, 0, 1)
billboard = 1

[node name="LeadCrosshair" type="Sprite3D" parent="TargetIndicator"]
transform = Transform3D(0.003, 0, 0, 0, 0.003, 0, 0, 0, 0.003, 0, 0, 0)
pixel_size = 0.005
billboard = 1
fixed_size = true
texture = ExtResource("3_tef56")

================
File: scenes/component/pilot/player_pilot.tscn110144896532.tmp
================
[gd_scene load_steps=2 format=3 uid="uid://rjscsifxkuxr"]

[ext_resource type="Script" path="res://scenes/component/pilot/player_pilot.gd" id="1_eqnf8"]

[node name="PlayerPilot" type="Node3D" groups=["target"]]
script = ExtResource("1_eqnf8")

[node name="CanvasLayer" type="CanvasLayer" parent="."]
follow_viewport_enabled = true

[node name="ProgressBar" type="ProgressBar" parent="CanvasLayer"]
offset_left = 612.0
offset_top = 628.0
offset_right = 686.0
offset_bottom = 655.0
max_value = 1.0

[node name="VBoxContainer" type="VBoxContainer" parent="CanvasLayer"]
offset_left = 1037.0
offset_top = 310.0
offset_right = 1077.0
offset_bottom = 387.0

[node name="Yaw" type="Label" parent="CanvasLayer/VBoxContainer"]
layout_mode = 2

[node name="Roll" type="Label" parent="CanvasLayer/VBoxContainer"]
layout_mode = 2

[node name="Pitch" type="Label" parent="CanvasLayer/VBoxContainer"]
layout_mode = 2

[node name="TargetRaycast" type="RayCast3D" parent="."]
target_position = Vector3(0, 0, -1000)
collision_mask = 16
collide_with_areas = true
collide_with_bodies = false

================
File: scenes/component/random_stream_player_component.gd
================
class_name RandomStreamPlayerComponent extends AudioStreamPlayer3D

@export var streams: Array[AudioStream]
@export var randomize_pitch: bool = true
@export var min_pitch: float = 0.9
@export var max_pitch: float = 1.1

func play_random() -> void:
	if streams == null || streams.size() == 0:
		return
		
	if randomize_pitch:
		pitch_scale = randf_range(min_pitch, max_pitch)
	else:
		pitch_scale = 1

	stream = streams.pick_random()
	play()

================
File: scenes/component/random_stream_player_component.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://cpto3ymq6nwb4"]

[ext_resource type="Script" path="res://scenes/component/random_stream_player_component.gd" id="1_7dc5x"]

[node name="RandomStreamPlayerComponent" type="AudioStreamPlayer3D"]
bus = &"sfx"
doppler_tracking = 2
script = ExtResource("1_7dc5x")

================
File: scenes/component/target_area.gd
================
class_name TargetArea extends Area3D

@export var ship: RigidBody3D

================
File: scenes/component/target_area.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://3bf61opumyhg"]

[ext_resource type="Script" path="res://scenes/component/target_area.gd" id="1_v27ej"]

[node name="TargetArea" type="Area3D"]
collision_layer = 16
collision_mask = 0
monitoring = false
script = ExtResource("1_v27ej")

================
File: scenes/component/targeting/target.gd
================
extends Node

================
File: scenes/component/velocity_component.gd
================
class_name VelocityComponent extends Node

@export var max_speed: int = 50
@export var acceleration: float = 5

var velocity: Vector3 = Vector3.ZERO


func accelerate_in_direction(direction: Vector3) -> void:
	
	var desired_velocity:Vector3 = direction.normalized() * max_speed
	velocity = velocity.slerp(desired_velocity, 1 - exp(-acceleration *get_physics_process_delta_time()))
	
func decelerate() -> void:
	accelerate_in_direction(Vector3.ZERO)

func move(to_move: Node3D, delta: float) -> void:
	if to_move is CharacterBody3D:
		to_move.velocity = velocity
		to_move.move_and_slide()
		velocity = to_move.velocity
	else:
		to_move.position += velocity * delta

================
File: scenes/component/velocity_component.tscn
================
[gd_scene load_steps=2 format=3 uid="uid://d14um02htlksm"]

[ext_resource type="Script" path="res://scenes/component/velocity_component.gd" id="1_38hes"]

[node name="VelocityComponent" type="Node3D"]
script = ExtResource("1_38hes")

================
File: scenes/csg_mesh_3d.gd
================
extends CSGMesh3D



func _on_hurtbox_hit() -> void:
	(material as StandardMaterial3D).albedo_color = Color.RED

================
File: scenes/csg_mesh_3d.tscn
================
[gd_scene load_steps=7 format=3 uid="uid://yl7uwjkjbml"]

[ext_resource type="Script" path="res://scenes/csg_mesh_3d.gd" id="1_wtcaj"]
[ext_resource type="PackedScene" uid="uid://dmtst8fnji83l" path="res://scenes/component/health_component.tscn" id="2_yrf08"]
[ext_resource type="PackedScene" uid="uid://b8ha4ultrkxnb" path="res://scenes/component/hurtbox.tscn" id="3_siugq"]

[sub_resource type="BoxMesh" id="BoxMesh_e5rhn"]
size = Vector3(5, 5, 5)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_mfajj"]
resource_local_to_scene = true

[sub_resource type="BoxShape3D" id="BoxShape3D_v4o1e"]
size = Vector3(5, 5, 5)

[node name="CSGMesh3D" type="CSGMesh3D"]
mesh = SubResource("BoxMesh_e5rhn")
material = SubResource("StandardMaterial3D_mfajj")
script = ExtResource("1_wtcaj")

[node name="HealthComponent" parent="." instance=ExtResource("2_yrf08")]

[node name="Hurtbox" parent="." node_paths=PackedStringArray("health_component") instance=ExtResource("3_siugq")]
health_component = NodePath("../HealthComponent")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Hurtbox"]
shape = SubResource("BoxShape3D_v4o1e")

[connection signal="hit" from="Hurtbox" to="." method="_on_hurtbox_hit"]

================
File: scenes/game_object/npc_ship.tscn430872673.tmp
================
[gd_scene load_steps=16 format=3 uid="uid://cxkwdhwvmgfxv"]

[ext_resource type="Script" path="res://scenes/game_object/npc_ship.gd" id="1_0nu02"]
[ext_resource type="Script" path="res://scenes/game_object/ship/ship_physics.gd" id="1_rto4w"]
[ext_resource type="PackedScene" uid="uid://dmtst8fnji83l" path="res://scenes/component/health_component.tscn" id="2_d72rs"]
[ext_resource type="ArrayMesh" uid="uid://fsyy7f8h42iq" path="res://assets/player_ship.obj" id="3_0kruw"]
[ext_resource type="PackedScene" uid="uid://b8ha4ultrkxnb" path="res://scenes/component/hurtbox.tscn" id="3_0s5s2"]
[ext_resource type="PackedScene" uid="uid://duhryesqv6mm8" path="res://scenes/game_object/weapons/gun.tscn" id="5_alaf8"]
[ext_resource type="PackedScene" uid="uid://skf788cyrcng" path="res://scenes/component/pilot/npc_pilot.tscn" id="6_abf6t"]
[ext_resource type="PackedScene" uid="uid://3bf61opumyhg" path="res://scenes/component/target_area.tscn" id="8_g7kfv"]
[ext_resource type="PackedScene" uid="uid://cpto3ymq6nwb4" path="res://scenes/component/random_stream_player_component.tscn" id="9_g7q7u"]
[ext_resource type="AudioStream" uid="uid://ckkg510k6na7l" path="res://assets/sounds/zapsplat_foley_paper_sheet_a4_flat_hit_impact_003_99124.mp3" id="10_wgpdu"]
[ext_resource type="PackedScene" uid="uid://42ed8d4svbt3" path="res://scenes/component/on_death_component.tscn" id="11_0d6px"]
[ext_resource type="PackedScene" uid="uid://jdtu4m2snino" path="res://scenes/game_object/vfx/death_explosion.tscn" id="12_sxuen"]

[sub_resource type="BoxShape3D" id="BoxShape3D_47h1e"]
size = Vector3(14.8996, 10, 10)

[sub_resource type="BoxShape3D" id="BoxShape3D_6dk2n"]

[sub_resource type="SphereShape3D" id="SphereShape3D_k8xgg"]
radius = 50.0

[node name="NpcShip" type="RigidBody3D"]
mass = 100.0
gravity_scale = 0.0
freeze_mode = 1
linear_damp = 2.0
angular_damp = 5.0
script = ExtResource("1_0nu02")

[node name="HealthComponent" parent="." instance=ExtResource("2_d72rs")]
max_health = 50

[node name="Hurtbox" parent="." node_paths=PackedStringArray("health_component") instance=ExtResource("3_0s5s2")]
health_component = NodePath("../HealthComponent")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Hurtbox"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0924459, 0, 2.00272e-05)
shape = SubResource("BoxShape3D_47h1e")

[node name="ShipPhysics" type="Node" parent="." node_paths=PackedStringArray("rigid_body")]
script = ExtResource("1_rto4w")
rigid_body = NodePath("..")

[node name="Visuals" type="Node3D" parent="."]

[node name="Gun" parent="Visuals" instance=ExtResource("5_alaf8")]

[node name="MeshInstance3D" type="MeshInstance3D" parent="Visuals"]
transform = Transform3D(-3.745, 0, -5.65479e-07, 0, 3.745, 0, 5.65479e-07, 0, -3.745, 0, -3.5, 0)
layers = 2
mesh = ExtResource("3_0kruw")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("BoxShape3D_6dk2n")

[node name="Pilot" parent="." node_paths=PackedStringArray("own_ship", "weapon") instance=ExtResource("6_abf6t")]
faction = 1
own_ship = NodePath("..")
weapon = NodePath("../Visuals/Gun")

[node name="TargetArea" parent="." node_paths=PackedStringArray("ship") instance=ExtResource("8_g7kfv")]
collision_layer = 16
collision_mask = 0
monitoring = false
ship = NodePath("..")

[node name="CollisionShape3D" type="CollisionShape3D" parent="TargetArea"]
shape = SubResource("SphereShape3D_k8xgg")

[node name="RandomStreamPlayerComponent" parent="." instance=ExtResource("9_g7q7u")]
volume_db = 2.0
unit_size = 50.02
max_distance = 1500.0
max_polyphony = 2
streams = Array[AudioStream]([ExtResource("10_wgpdu")])

[node name="OnDeathComponent" parent="." node_paths=PackedStringArray("health_component") instance=ExtResource("11_0d6px")]
health_component = NodePath("../HealthComponent")
on_death_scene = ExtResource("12_sxuen")

[editable path="Visuals/Gun"]

================
File: scenes/game_object/projectile/projectile_mesh.tres
================
[gd_resource type="BoxMesh" load_steps=2 format=3 uid="uid://br1lq61hfnuct"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_ql1wx"]
transparency = 1
shading_mode = 0
albedo_color = Color(0, 1, 0, 1)

[resource]
material = SubResource("StandardMaterial3D_ql1wx")
size = Vector3(0.4, 0.4, 4)

================
File: scenes/game_object/projectile/projectile_server.gd
================
extends Node3D

var multimesh_pools: Dictionary[String,MultiMeshInstance3D] = {}
var active_projectiles: Dictionary[RID,ProjectileData]

const MAX_PROJECTILES_PER_POOL = 10000
	

func _physics_process(delta: float) -> void:

	for key: RID in active_projectiles.keys():
		active_projectiles[key].lived += delta
		var proj: ProjectileData = active_projectiles[key]
		
		if proj.lived >= proj.lifetime:
			destroy_projectile(proj.body)
			continue
			
		
		var current_transform: Transform3D = PhysicsServer3D.body_get_state(proj.body, PhysicsServer3D.BODY_STATE_TRANSFORM)
		#var new_position: Vector3 = current_transform.origin + proj.velocity * delta
		#current_transform.origin = new_position
	#
		#PhysicsServer3D.body_set_state(proj.body, PhysicsServer3D.BODY_STATE_TRANSFORM, current_transform)
		proj.multimesh.set_instance_transform(proj.instance_id, current_transform)
	

func get_or_create_multimesh_pool(mesh_path:String, mesh: Mesh) -> MultiMeshInstance3D:
	if mesh_path in multimesh_pools:
		return multimesh_pools[mesh_path]
	var multimesh: MultiMesh = MultiMesh.new()
	multimesh.transform_format = MultiMesh.TRANSFORM_3D
	multimesh.use_custom_data = true
	multimesh.instance_count = MAX_PROJECTILES_PER_POOL
	multimesh.mesh = mesh
	
	var multimesh_instance: MultiMeshInstance3D = MultiMeshInstance3D.new()
	multimesh_instance.multimesh = multimesh
	
	for i in MAX_PROJECTILES_PER_POOL:
		multimesh.set_instance_custom_data(i, Color(1,1,1,0))
	var main: Node = get_tree().current_scene
	main.add_child(multimesh_instance)
	multimesh_pools[mesh_path] = multimesh_instance
	return multimesh_instance

func find_available_instance_id(multimesh: MultiMesh) -> int:
	for i in MAX_PROJECTILES_PER_POOL: #THIS MAY BE AWFUL
		if multimesh.get_instance_custom_data(i).a < 0.5:
			return i
	print("no projs :(")
	return -1

func spawn_projectile(
	mesh_resource: Mesh, start_transform: Transform3D, target_pos: Vector3,
	speed: float, damage: int, faction: int, lifetime: float
	) -> void:
	var ps:= PhysicsServer3D
	var mesh_path: String = mesh_resource.resource_path
	var multimesh_instance: MultiMeshInstance3D = get_or_create_multimesh_pool(mesh_path,mesh_resource)
	
	var body: RID = ps.body_create()
	ps.body_set_mode(body, ps.BODY_MODE_RIGID)
	ps.body_apply_central_impulse(body,-start_transform.basis.z * speed)
	
	var shape: SphereShape3D = SphereShape3D.new()
	shape.radius = 10
	var shape_rid: RID = ps.sphere_shape_create()
	ps.shape_set_data(shape_rid,shape)
	
	ps.body_add_shape(body,shape)
	#ps.body_set_collision_layer(body,0b1000)
	ps.body_set_collision_layer(body,0b100)
	ps.body_set_collision_mask(body, 0b100)

	ps.body_set_state(body,ps.BODY_STATE_TRANSFORM,start_transform)
	ps.body_set_space(body, get_tree().root.world_3d.space)
	
	var direction: Vector3 = (target_pos - start_transform.origin).normalized()
	var velocity: Vector3 = direction * speed
	
	var instance_id: int = find_available_instance_id(multimesh_instance.multimesh)
	if instance_id == -1:
		return
		
	var proj_data: ProjectileData = ProjectileData.new()
	proj_data.body = body
	proj_data.shape = shape_rid
	proj_data.multimesh = multimesh_instance.multimesh
	proj_data.instance_id = instance_id
	proj_data.velocity = velocity
	proj_data.damage = damage
	proj_data.faction = faction
	proj_data.start_pos = start_transform.origin
	proj_data.lifetime = lifetime
	
	active_projectiles[body] = proj_data
	
	multimesh_instance.multimesh.set_instance_transform(instance_id,start_transform)
	multimesh_instance.multimesh.set_instance_custom_data(instance_id, Color(1,1,1,1))
	
func destroy_projectile(body: RID) -> void:
	var ps:= PhysicsServer3D
	var proj:ProjectileData = active_projectiles[body]
	
	ps.free_rid(proj.shape)
	ps.free_rid(proj.body)
	proj.multimesh.set_instance_custom_data(proj.instance_id,Color(1,1,1,0))
	
	active_projectiles.erase(body)
	

func get_proj_data_from_rid(body: RID) -> ProjectileData:
	return active_projectiles.get(body)

================
File: scenes/game_object/projectile/projectile.gd
================
class_name Projectile extends Node3D

@onready var velocity_component: VelocityComponent = $VelocityComponent
@onready var on_signal_spawner_component: OnSignalSpawnerComponent = $OnSignalSpawnerComponent

func _physics_process(delta: float) -> void:
	velocity_component.move(self,delta)


func _on_hitbox_hit(_thing_hit: Node3D) -> void:
	on_signal_spawner_component.on_signal(_thing_hit)
	queue_free()


func _on_timer_timeout() -> void:
	queue_free()

================
File: scenes/game_object/projectile/projectile.tscn
================
[gd_scene load_steps=11 format=3 uid="uid://biqgfh3vefxmj"]

[ext_resource type="Script" path="res://scenes/game_object/projectile/projectile.gd" id="1_ys1lj"]
[ext_resource type="PackedScene" uid="uid://d14um02htlksm" path="res://scenes/component/velocity_component.tscn" id="2_plbux"]
[ext_resource type="PackedScene" uid="uid://b6ccgjx8qg12h" path="res://scenes/component/hitbox.tscn" id="4_5ovbm"]
[ext_resource type="PackedScene" uid="uid://l5w22dde6bj4" path="res://scenes/component/on_signal_spawner_component.tscn" id="4_rmua4"]
[ext_resource type="PackedScene" uid="uid://bkcrjh66ip304" path="res://scenes/game_object/vfx/hit_explosion.tscn" id="5_0slbk"]

[sub_resource type="Gradient" id="Gradient_mkcpu"]
colors = PackedColorArray(1, 1, 1, 1, 0, 0, 0, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_epdqd"]
gradient = SubResource("Gradient_mkcpu")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_bbner"]
transparency = 1
shading_mode = 0
albedo_color = Color(0, 1, 0, 1)
detail_mask = SubResource("GradientTexture1D_epdqd")

[sub_resource type="BoxMesh" id="BoxMesh_otcht"]
size = Vector3(0.4, 4, 0.4)

[sub_resource type="SphereShape3D" id="SphereShape3D_s6lec"]
radius = 1.0

[node name="Projectile" type="Node3D"]
script = ExtResource("1_ys1lj")

[node name="VelocityComponent" parent="." instance=ExtResource("2_plbux")]
max_speed = 1000

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
material_override = SubResource("StandardMaterial3D_bbner")
gi_mode = 0
mesh = SubResource("BoxMesh_otcht")

[node name="Hitbox" parent="." instance=ExtResource("4_5ovbm")]
damage = 10

[node name="CollisionShape3D" type="CollisionShape3D" parent="Hitbox"]
shape = SubResource("SphereShape3D_s6lec")

[node name="Timer" type="Timer" parent="."]
wait_time = 8.0
autostart = true

[node name="OnSignalSpawnerComponent" parent="." instance=ExtResource("4_rmua4")]
on_signal_scene = ExtResource("5_0slbk")

[connection signal="hit" from="Hitbox" to="." method="_on_hitbox_hit"]
[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]

================
File: scenes/game_object/ship_camera/camera_rig.gd
================
class_name CameraRig extends Node3D

@export var ship: Node3D #Ship to follow
@export var smooth_speed: float = 10
@export var fancy_cam: bool

@export_category("Lookahead Values")
@export var horizontal_turn_angle: float = deg_to_rad(40)
@export var vertical_turn_up_angle: float = deg_to_rad(15)
@export var vertical_turn_down_angle: float = deg_to_rad(40)

@onready var camera: Node3D = $LookAheadRig/MainCamera
@onready var look_ahead_rig: Node3D = $LookAheadRig



func _physics_process(delta: float) -> void:
	move_camera(delta)



func move_camera(delta:float) -> void:
	if ship == null:
		return
	
	global_position = ship.global_position
	var target_rig_rotation: Quaternion = Util.qt_look_at(ship.global_transform.basis.z, global_transform.basis.y)
	#quaternion = Util.qt_damp(quaternion,target_rig_rotation, smooth_speed, delta)
	
	global_transform.basis = Basis(Util.qt_damp(global_transform.basis.get_rotation_quaternion(),target_rig_rotation,smooth_speed, delta))
	
	if fancy_cam:
		look_ahead(delta)


func look_ahead(delta:float) -> void:
	var mouse_pos: Vector2 = get_viewport().get_mouse_position()
	var screen_size: Vector2 = get_viewport().size
	
	var mouse_screen_x: float = (mouse_pos.x - (screen_size.x * 0.5)) / (screen_size.x * 0.5)
	var mouse_screen_y: float = -(mouse_pos.y - (screen_size.y * 0.5)) / (screen_size.y * 0.5)
	mouse_screen_x = clamp(mouse_screen_x, -1.0, 1.0)
	mouse_screen_y = clamp(mouse_screen_y, -1.0, 1.0)

	var horizontal: float = horizontal_turn_angle * mouse_screen_x
	var vertical: float = vertical_turn_down_angle * mouse_screen_y if mouse_screen_y < 0.0 else vertical_turn_up_angle * mouse_screen_y
	
	var target_rotation: Quaternion = Quaternion.from_euler(Vector3(-vertical, horizontal , 0))
	look_ahead_rig.transform.basis = Basis(Util.qt_damp(look_ahead_rig.quaternion,target_rotation, smooth_speed, delta))

	var lookahead_pos: Vector3 = ship.global_position-(ship.global_transform.basis.z * 100)
	camera.look_at(lookahead_pos, look_ahead_rig.global_transform.basis.y)

#void Node3D::look_at(const Vector3 &p_target, const Vector3 &p_up, bool p_use_model_front) {
	#ERR_THREAD_GUARD;
	#ERR_FAIL_COND_MSG(!is_inside_tree(), "Node not inside tree. Use look_at_from_position() instead.");
	#Vector3 origin = get_global_transform().origin;
	#look_at_from_position(origin, p_target, p_up, p_use_model_front);
#}
#
#void Node3D::look_at_from_position(const Vector3 &p_pos, const Vector3 &p_target, const Vector3 &p_up, bool p_use_model_front) {
	#ERR_THREAD_GUARD;
	#ERR_FAIL_COND_MSG(p_pos.is_equal_approx(p_target), "Node origin and target are in the same position, look_at() failed.");
	#ERR_FAIL_COND_MSG(p_up.is_zero_approx(), "The up vector can't be zero, look_at() failed.");
	#ERR_FAIL_COND_MSG(p_up.cross(p_target - p_pos).is_zero_approx(), "Up vector and direction between node origin and target are aligned, look_at() failed.");
#
	#Vector3 forward = p_target - p_pos;
	#Basis lookat_basis = Basis::looking_at(forward, p_up, p_use_model_front);
	#Vector3 original_scale = get_scale();
	#set_global_transform(Transform3D(lookat_basis, p_pos));
	#set_scale(original_scale);
#}

================
File: scenes/game_object/ship_camera/camera_rig.tscn
================
[gd_scene load_steps=5 format=3 uid="uid://diw52h5jif8v2"]

[ext_resource type="Script" path="res://scenes/game_object/ship_camera/camera_rig.gd" id="1_shvuj"]
[ext_resource type="Texture2D" uid="uid://di42dtg83jpy2" path="res://assets/crosshairs_tilesheet_white.png" id="2_4cu4t"]
[ext_resource type="Script" path="res://scenes/game_object/ship_camera/crosshair.gd" id="3_dvs8i"]

[sub_resource type="AtlasTexture" id="AtlasTexture_ve0ii"]
atlas = ExtResource("2_4cu4t")
region = Rect2(491, 642, 48, 22)

[node name="CameraRig" type="Node3D"]
script = ExtResource("1_shvuj")

[node name="LookAheadRig" type="Node3D" parent="."]

[node name="MainCamera" type="Node3D" parent="LookAheadRig"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 6.73, 26.42)

[node name="Camera3D" type="Camera3D" parent="LookAheadRig/MainCamera"]
current = true
fov = 60.0
near = 1.0
far = 10000.0

[node name="Crosshair" type="CanvasLayer" parent="."]

[node name="Sprite2D" type="Sprite2D" parent="Crosshair"]
texture = SubResource("AtlasTexture_ve0ii")
script = ExtResource("3_dvs8i")

================
File: scenes/game_object/ship_camera/crosshair.gd
================
extends Sprite2D

func _process(_delta: float) -> void:
	position = get_viewport().get_mouse_position()

================
File: scenes/game_object/ship/npc_ship.tscn
================
[gd_scene load_steps=7 format=3 uid="uid://cxkwdhwvmgfxv"]

[ext_resource type="PackedScene" uid="uid://d2dv0c0hvt7rb" path="res://scenes/game_object/ship/ship.tscn" id="1_rfahr"]
[ext_resource type="ArrayMesh" uid="uid://fsyy7f8h42iq" path="res://assets/player_ship.obj" id="3_0kruw"]
[ext_resource type="PackedScene" uid="uid://skf788cyrcng" path="res://scenes/component/pilot/npc_pilot.tscn" id="6_abf6t"]
[ext_resource type="PackedScene" uid="uid://3bf61opumyhg" path="res://scenes/component/target_area.tscn" id="8_g7kfv"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_foa4f"]
radius = 6.10601
height = 17.715

[sub_resource type="SphereShape3D" id="SphereShape3D_phmob"]
radius = 50.0

[node name="Ship" node_paths=PackedStringArray("pilot") instance=ExtResource("1_rfahr")]
pilot = NodePath("Pilot")

[node name="MeshInstance3D" parent="Visual" index="1"]
mesh = ExtResource("3_0kruw")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Hurtbox" index="0"]
transform = Transform3D(1, 0, 0, 0, 0.0138575, 0.999904, 0, -0.999904, 0.0138575, 0, 0, 0)
shape = SubResource("CapsuleShape3D_foa4f")

[node name="HealthComponent" parent="." index="4"]
max_health = 100

[node name="Pilot" parent="." index="5" node_paths=PackedStringArray("own_ship", "weapon") instance=ExtResource("6_abf6t")]
own_ship = NodePath("..")
weapon = NodePath("../Visual/Gun")

[node name="TargetArea" parent="." index="6" node_paths=PackedStringArray("ship") instance=ExtResource("8_g7kfv")]
ship = NodePath("..")

[node name="CollisionShape3D" type="CollisionShape3D" parent="TargetArea" index="0"]
shape = SubResource("SphereShape3D_phmob")

[editable path="Visual/Gun"]

================
File: scenes/game_object/ship/player_ship.tscn
================
[gd_scene load_steps=4 format=3 uid="uid://c8ps4kffu7ucb"]

[ext_resource type="PackedScene" uid="uid://d2dv0c0hvt7rb" path="res://scenes/game_object/ship/ship.tscn" id="1_7bq24"]
[ext_resource type="PackedScene" uid="uid://rjscsifxkuxr" path="res://scenes/component/pilot/player_pilot.tscn" id="7_0qwhp"]

[sub_resource type="BoxShape3D" id="BoxShape3D_xcjcx"]
size = Vector3(6.66559, 3.15131, 10.4094)

[node name="Ship" node_paths=PackedStringArray("pilot") instance=ExtResource("1_7bq24")]
pilot = NodePath("Pilot")

[node name="CollisionShape3D" type="CollisionShape3D" parent="Hurtbox" index="0"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.049469, 0.123444, -0.164917)
shape = SubResource("BoxShape3D_xcjcx")

[node name="Pilot" parent="." index="5" node_paths=PackedStringArray("own_ship", "weapon") instance=ExtResource("7_0qwhp")]
own_ship = NodePath("..")
weapon = NodePath("../Visual/Gun")

[editable path="Visual/Gun"]

================
File: scenes/game_object/ship/ship_input.gd
================
class_name ShipInput extends Node3D

@export var bank_limit: float = deg_to_rad(50)

@export_range(-1,1) var pitch: float
@export_range(-1,1) var yaw: float
@export_range(-1,1) var roll: float
@export_range(-1,1) var strafe: float
@export_range(-0.2,1) var throttle: float


var pitch_pid: PID = PID.new(1.5, 1, 0.5)
var yaw_pid: PID = PID.new(1.5, 1, 0.5)
var roll_pid: PID = PID.new(0.3, 1.0, 1.0)

@export var throttle_speed: float = 0.5

@onready var debug_ray: RayCast3D = $RayCast3D
@onready var sprite: Sprite2D = $CanvasLayer/Sprite2D
@onready var label: Label = $CanvasLayer/Label
@onready var throt: ProgressBar = $CanvasLayer/ProgressBar
@onready var yaw_lab: Label = $CanvasLayer/VBoxContainer/Yaw
@onready var roll_lab: Label = $CanvasLayer/VBoxContainer/Roll
@onready var pitch_lab: Label = $CanvasLayer/VBoxContainer/Pitch

func _process(delta: float) -> void:
	strafe = Input.get_axis("move_left","move_right")
	
	auto_pilot(delta)
	update_throttle(delta)


func auto_pilot(delta:float) -> void:
	var camera: Camera3D = get_viewport().get_camera_3d()
	var mouse_pos: Vector2 = get_viewport().get_mouse_position()
	var world_pos: Vector3 = camera.project_position(mouse_pos, 1000)
	
	sprite.position = mouse_pos
	label.text = "Mouse coord: " + str(get_mouse_pos())
	turn_towards_point(world_pos, delta)
	bank_ship_relative_to_up(mouse_pos,camera.global_basis.y, delta)
	
func bank_ship_relative_to_up(mouse_pos: Vector2, up: Vector3, delta:float) -> void:
	var bank_influence: float = (mouse_pos.x - (get_viewport().size.x * 0.5)) / (get_viewport().size.x * 0.5)
	bank_influence = clampf(bank_influence,-1,1)
	bank_influence *= throttle
	
	var bank_target: float = - bank_influence * bank_limit
	var bank_current: float = global_transform.basis.y.signed_angle_to(up, -global_transform.basis.z)
	var bank: float = roll_pid.update(bank_target, bank_current, delta)
	#bank_error = bank_error - bank_target
	bank = clampf(bank, -1,1)
	
	roll = bank
	roll_lab.text = "Roll: " + str(roll)


func turn_towards_point(to: Vector3, delta: float) -> void:
	var local_to: Vector3 = to_local(to).normalized()

	
	pitch = clampf(pitch_pid.update(0, -local_to.y, delta), -1, 1)
	yaw = clampf(yaw_pid.update(0, local_to.x, delta), -1,1)
	pitch_lab.text ="Pitch: " + str(pitch)
	yaw_lab.text = "Yaw: " + str(yaw)
	
func update_throttle(delta: float) -> void:
	var target: float = throttle
	if Input.is_action_pressed("move_forward"):
		target = 1
	elif Input.is_action_pressed("move_backward"):
		target = -.2
	
	throttle = move_toward(throttle, target, throttle_speed * delta)
	throt.value = throttle

func get_mouse_pos() -> Vector2:
	var mouse_pos: Vector2 = get_viewport().get_mouse_position()
	var half_screen_size: Vector2 = get_viewport().size * 0.5
	return (mouse_pos - half_screen_size) / half_screen_size

================
File: scenes/game_object/ship/ship_physics.gd
================
class_name ShipPhysics extends Node

#X: Lateral, Y: Vertical, Z: Longitudinal
var linear_force: Vector3 = Vector3(100,100,100)
#X: Pitch, Y: Yaw, Z: Roll
var angular_force: Vector3 = Vector3(deg_to_rad(100),deg_to_rad(100),deg_to_rad(100))

var reverse_multiplier: float = 1
var force_multiplier: float = 300

var applied_linear_force: Vector3 = Vector3.ZERO
var applied_angular_force: Vector3 = Vector3.ZERO

@export var rigid_body: RigidBody3D

func _physics_process(_delta: float) -> void:
	if rigid_body != null:
		rigid_body.apply_central_force(rigid_body.transform.basis * (applied_linear_force * force_multiplier))
		rigid_body.apply_torque(rigid_body.transform.basis * (applied_angular_force * force_multiplier))

func set_physics_input(linear_input: Vector3, angular_input: Vector3) -> void:
	applied_linear_force = linear_force * linear_input
	applied_angular_force = angular_force * angular_input

================
File: scenes/game_object/ship/ship.gd
================
class_name Ship extends RigidBody3D

@onready var ship_physics: ShipPhysics = $ShipPhysics
@onready var hp: HealthComponent = $HealthComponent

@export var pilot: Pilot
@export var ship_stats: ShipData

func _ready() -> void:
	if ship_stats != null:
		set_stats(ship_stats)

func _process(_delta: float) -> void:
	ship_physics.set_physics_input(
		Vector3(
			pilot.strafe, 
			0, 
			-pilot.throttle
		),
		Vector3(
			pilot.pitch,
			pilot.yaw,
			pilot.roll
		)
	)

func set_stats(ship_data:ShipData) -> void:
	hp.set_max_health(ship_data.health)
	mass = ship_data.mass
	ship_physics.linear_force = ship_data.speed
	ship_physics.angular_force = Vector3(deg_to_rad(ship_data.torque.x),deg_to_rad(ship_data.torque.y),deg_to_rad(ship_data.torque.z))
	linear_damp = ship_data.linear_drag
	angular_damp = ship_data.linear_drag
	
	if pilot != null:
		pilot.throttle_speed = ship_data.accel

================
File: scenes/game_object/ship/ship.tscn
================
[gd_scene load_steps=16 format=3 uid="uid://d2dv0c0hvt7rb"]

[ext_resource type="Script" path="res://scenes/game_object/ship/ship.gd" id="1_i8rlt"]
[ext_resource type="PackedScene" uid="uid://duhryesqv6mm8" path="res://scenes/game_object/weapons/gun.tscn" id="2_fr7ol"]
[ext_resource type="ArrayMesh" uid="uid://7125osetkoju" path="res://assets/ship2.obj" id="3_ct5re"]
[ext_resource type="Script" path="res://scenes/game_object/ship/ship_physics.gd" id="3_fcr5x"]
[ext_resource type="Texture2D" uid="uid://26yo4d5if34g" path="res://assets/Crosshair.png" id="3_mosj5"]
[ext_resource type="Shader" path="res://scenes/game_object/ship/thrust.gdshader" id="5_p4m1f"]
[ext_resource type="PackedScene" uid="uid://b8ha4ultrkxnb" path="res://scenes/component/hurtbox.tscn" id="7_ysnnw"]
[ext_resource type="PackedScene" uid="uid://dmtst8fnji83l" path="res://scenes/component/health_component.tscn" id="8_cpiva"]
[ext_resource type="PackedScene" uid="uid://42ed8d4svbt3" path="res://scenes/component/on_death_component.tscn" id="8_j4is4"]
[ext_resource type="PackedScene" uid="uid://jdtu4m2snino" path="res://scenes/game_object/vfx/death_explosion.tscn" id="9_77ib6"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_hd7mj"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_8kmgx"]
noise = SubResource("FastNoiseLite_hd7mj")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_42hgy"]
render_priority = 0
shader = ExtResource("5_p4m1f")
shader_parameter/model_height = 3.0
shader_parameter/dissolve_start = 0.0
shader_parameter/dissolve_length = 1.0
shader_parameter/gradient_bias = 1.501
shader_parameter/noise_direction = Vector2(0.48, 1)
shader_parameter/noise_speed = 5.38
shader_parameter/noise_strength = 0.505
shader_parameter/stretch_factor = 0.895
shader_parameter/noise_texture = SubResource("NoiseTexture2D_8kmgx")
shader_parameter/_color = Color(0.820779, 0.151384, 0.895735, 1)
shader_parameter/power_factor = 0.29
shader_parameter/alpha_intensity_factor = 2.0
shader_parameter/fresnel_factor = 3.96
shader_parameter/fresnel_amplification = 0.16
shader_parameter/fresnel_power = 0.67
shader_parameter/enable_fresnel = false

[sub_resource type="CylinderMesh" id="CylinderMesh_5mocl"]
top_radius = 0.1
bottom_radius = 0.855
height = 3.01

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_1ua5q"]
radius = 0.636094
height = 3.5097

[node name="Ship" type="RigidBody3D"]
mass = 100.0
gravity_scale = 0.0
freeze_mode = 1
linear_damp = 2.0
angular_damp = 5.0
script = ExtResource("1_i8rlt")

[node name="Visual" type="Node3D" parent="."]

[node name="Gun" parent="Visual" instance=ExtResource("2_fr7ol")]

[node name="Marker3D" parent="Visual/Gun" index="3"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -6.88865, 0, 0)

[node name="Marker3D2" parent="Visual/Gun" index="4"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 7.39663, 0, 0)

[node name="MeshInstance3D" type="MeshInstance3D" parent="Visual"]
transform = Transform3D(-2.97, 0, -2.59646e-07, 0, 2.97, 0, 2.59646e-07, 0, -2.97, 0, -1.445, 0)
layers = 2
mesh = ExtResource("3_ct5re")

[node name="Sprite3D" type="Sprite3D" parent="Visual"]
transform = Transform3D(0.165, 0, 0, 0, 0.165, 0, 0, 0, 0.165, 0, 0, -1000)
visible = false
layers = 2
billboard = 1
no_depth_test = true
fixed_size = true
texture_filter = 0
texture = ExtResource("3_mosj5")

[node name="RightThrust" type="MeshInstance3D" parent="Visual"]
transform = Transform3D(1, 0, 0, 0, -0.00342087, -0.999994, 0, 0.999994, -0.00342087, 3.03731, -0.372677, 5.91967)
material_override = SubResource("ShaderMaterial_42hgy")
mesh = SubResource("CylinderMesh_5mocl")

[node name="LeftThrust" type="MeshInstance3D" parent="Visual"]
transform = Transform3D(1, 0, 0, 0, -0.00342087, -0.999994, 0, 0.999994, -0.00342087, -3.037, -0.373, 5.92)
material_override = SubResource("ShaderMaterial_42hgy")
mesh = SubResource("CylinderMesh_5mocl")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, -0.634606)
shape = SubResource("CapsuleShape3D_1ua5q")

[node name="ShipPhysics" type="Node" parent="." node_paths=PackedStringArray("rigid_body")]
script = ExtResource("3_fcr5x")
rigid_body = NodePath("..")

[node name="Hurtbox" parent="." node_paths=PackedStringArray("health_component") instance=ExtResource("7_ysnnw")]
health_component = NodePath("../HealthComponent")

[node name="HealthComponent" parent="." instance=ExtResource("8_cpiva")]
max_health = 1000

[node name="OnDeathComponent" parent="." node_paths=PackedStringArray("health_component") instance=ExtResource("8_j4is4")]
health_component = NodePath("../HealthComponent")
on_death_scene = ExtResource("9_77ib6")

[editable path="Visual/Gun"]

================
File: scenes/game_object/ship/ship.tscn96267177929.tmp
================
[gd_scene load_steps=7 format=3 uid="uid://c8ps4kffu7ucb"]

[ext_resource type="ArrayMesh" uid="uid://fsyy7f8h42iq" path="res://assets/player_ship.obj" id="1_h3ck2"]
[ext_resource type="Script" path="res://scenes/game_object/ship/ship.gd" id="1_i8rlt"]
[ext_resource type="Script" path="res://scenes/game_object/ship/ship_input.gd" id="3_44wn0"]
[ext_resource type="Script" path="res://scenes/game_object/ship/ship_physics.gd" id="3_fcr5x"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_1ua5q"]
radius = 0.636094
height = 3.5097

[sub_resource type="PlaceholderTexture2D" id="PlaceholderTexture2D_2x1uj"]
size = Vector2(5, 5)

[node name="Ship" type="RigidBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
mass = 100.0
gravity_scale = 0.0
freeze_mode = 1
linear_damp = 2.0
angular_damp = 5.0
script = ExtResource("1_i8rlt")

[node name="Visual" type="Node3D" parent="."]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0)

[node name="MeshInstance3D" type="MeshInstance3D" parent="Visual"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0)
mesh = ExtResource("1_h3ck2")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0.522375)
shape = SubResource("CapsuleShape3D_1ua5q")

[node name="ShipPhysics" type="Node" parent="." node_paths=PackedStringArray("rigid_body")]
script = ExtResource("3_fcr5x")
rigid_body = NodePath("..")

[node name="ShipInput" type="Node3D" parent="."]
script = ExtResource("3_44wn0")

[node name="RayCast3D" type="RayCast3D" parent="ShipInput"]

[node name="CanvasLayer" type="CanvasLayer" parent="ShipInput"]
follow_viewport_enabled = true

[node name="Sprite2D" type="Sprite2D" parent="ShipInput/CanvasLayer"]
texture = SubResource("PlaceholderTexture2D_2x1uj")

[node name="Label" type="Label" parent="ShipInput/CanvasLayer"]
offset_right = 40.0
offset_bottom = 23.0

================
File: scenes/game_object/ship/ship.tscn98035510277.tmp
================
[gd_scene load_steps=7 format=3 uid="uid://c8ps4kffu7ucb"]

[ext_resource type="ArrayMesh" uid="uid://fsyy7f8h42iq" path="res://assets/player_ship.obj" id="1_h3ck2"]
[ext_resource type="Script" path="res://scenes/game_object/ship/ship.gd" id="1_i8rlt"]
[ext_resource type="Script" path="res://scenes/game_object/ship/ship_input.gd" id="3_44wn0"]
[ext_resource type="Script" path="res://scenes/game_object/ship/ship_physics.gd" id="3_fcr5x"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_1ua5q"]
radius = 0.636094
height = 3.5097

[sub_resource type="PlaceholderTexture2D" id="PlaceholderTexture2D_2x1uj"]
size = Vector2(5, 5)

[node name="Ship" type="RigidBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
mass = 100.0
gravity_scale = 0.0
freeze_mode = 1
linear_damp = 2.0
angular_damp = 5.0
script = ExtResource("1_i8rlt")

[node name="Visual" type="Node3D" parent="."]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0)

[node name="MeshInstance3D" type="MeshInstance3D" parent="Visual"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0)
mesh = ExtResource("1_h3ck2")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0.522375)
shape = SubResource("CapsuleShape3D_1ua5q")

[node name="ShipPhysics" type="Node" parent="." node_paths=PackedStringArray("rigid_body")]
script = ExtResource("3_fcr5x")
rigid_body = NodePath("..")

[node name="ShipInput" type="Node3D" parent="."]
script = ExtResource("3_44wn0")
bank_limit = null
pitch_sensitivity = null
yaw_sensitivity = null
roll_sensivity = null
pitch = null
yaw = null
roll = null
strafe = null
throttle = null
throttle_speed = null

[node name="RayCast3D" type="RayCast3D" parent="ShipInput"]

[node name="CanvasLayer" type="CanvasLayer" parent="ShipInput"]
follow_viewport_enabled = true

[node name="Sprite2D" type="Sprite2D" parent="ShipInput/CanvasLayer"]
texture = SubResource("PlaceholderTexture2D_2x1uj")

[node name="Label" type="Label" parent="ShipInput/CanvasLayer"]
offset_right = 40.0
offset_bottom = 23.0

================
File: scenes/game_object/ship/ship.tscn98050940527.tmp
================
[gd_scene load_steps=7 format=3 uid="uid://c8ps4kffu7ucb"]

[ext_resource type="ArrayMesh" uid="uid://fsyy7f8h42iq" path="res://assets/player_ship.obj" id="1_h3ck2"]
[ext_resource type="Script" path="res://scenes/game_object/ship/ship.gd" id="1_i8rlt"]
[ext_resource type="Script" path="res://scenes/game_object/ship/ship_input.gd" id="3_44wn0"]
[ext_resource type="Script" path="res://scenes/game_object/ship/ship_physics.gd" id="3_fcr5x"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_1ua5q"]
radius = 0.636094
height = 3.5097

[sub_resource type="PlaceholderTexture2D" id="PlaceholderTexture2D_2x1uj"]
size = Vector2(5, 5)

[node name="Ship" type="RigidBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
mass = 100.0
gravity_scale = 0.0
freeze_mode = 1
linear_damp = 2.0
angular_damp = 5.0
script = ExtResource("1_i8rlt")

[node name="Visual" type="Node3D" parent="."]
transform = Transform3D(-1, 0, -8.74228e-08, 0, 1, 0, 8.74228e-08, 0, -1, 0, 0, 0)

[node name="MeshInstance3D" type="MeshInstance3D" parent="Visual"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.5, 0)
mesh = ExtResource("1_h3ck2")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0.522375)
shape = SubResource("CapsuleShape3D_1ua5q")

[node name="ShipPhysics" type="Node" parent="." node_paths=PackedStringArray("rigid_body")]
script = ExtResource("3_fcr5x")
rigid_body = NodePath("..")

[node name="ShipInput" type="Node3D" parent="."]
script = ExtResource("3_44wn0")
bank_limit = null
pitch_sensitivity = null
yaw_sensitivity = null
roll_sensivity = null
pitch = null
yaw = null
roll = null
strafe = null
throttle = null
throttle_speed = null

[node name="RayCast3D" type="RayCast3D" parent="ShipInput"]

[node name="CanvasLayer" type="CanvasLayer" parent="ShipInput"]
follow_viewport_enabled = true

[node name="Sprite2D" type="Sprite2D" parent="ShipInput/CanvasLayer"]
texture = SubResource("PlaceholderTexture2D_2x1uj")

[node name="Label" type="Label" parent="ShipInput/CanvasLayer"]
offset_right = 40.0
offset_bottom = 23.0

================
File: scenes/game_object/ship/test_data.tres
================
[gd_resource type="Resource" script_class="ShipData" load_steps=2 format=3 uid="uid://di0uchf1ecbij"]

[ext_resource type="Script" path="res://scripts/ship_data.gd" id="1_re55a"]

[resource]
script = ExtResource("1_re55a")
health = 100
mass = 100.0
speed = Vector3(100, 100, 120)
torque = Vector3(100, 100, 100)
linear_drag = 2.0
ang_drag = 5.0
accel = 0.5

================
File: scenes/game_object/ship/thrust.gdshader
================
shader_type spatial;

render_mode blend_mix, unshaded, cull_back;

group_uniforms Basic_Effects;
uniform float model_height = 3.0;
uniform float dissolve_start : hint_range(0.0, 1.0) = 0.001;
uniform float dissolve_length : hint_range(0.0, 1.0) = 1.0;
uniform float gradient_bias : hint_range(0.1, 5.0) = 1.0;
uniform vec2 noise_direction = vec2(0.0, 1.0); // Direction of noise movement

group_uniforms Noise_Effects;
uniform float noise_speed = 1.0; // Speed of noise movement
uniform float noise_strength = 0.1; // Strength of the noise effect
uniform float stretch_factor = 0.6; // Factor to stretch the noise
uniform sampler2D noise_texture; // Noise texture

varying float vert_height;
varying vec2 v_uv;

group_uniforms Misc_Effects;
uniform vec3 _color : source_color;
uniform float power_factor = 1.0;
uniform float alpha_intensity_factor = 2.0;

group_uniforms Fresnel_Effects;
uniform float fresnel_factor = 1.0;
uniform float fresnel_amplification = 2.0; // Corrected typo
uniform float fresnel_power = 2.0;
uniform bool enable_fresnel = true;

vec3 neon(float value, vec3 color) {
    float ramp = clamp(value, 0.0, 1.0);
    vec3 output_color = vec3(0.0);
    ramp = ramp * ramp;
    output_color += pow(color, vec3(4.0)) * ramp;
    ramp = ramp * ramp;
    output_color += color * ramp;
    ramp = ramp * ramp;
    output_color += vec3(1.0) * ramp;
    return output_color;
}

float fresnel(float amount, vec3 normal, vec3 view) {
    return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0)), amount);
}

void vertex() {
    vert_height = (VERTEX.y + (model_height / 2.0)) / model_height;
    v_uv = UV;
}

void fragment() {
    float time = TIME * noise_speed;
    vec2 moving_uv = v_uv + noise_direction * time;
    vec2 stretched_uv = vec2(moving_uv.x, moving_uv.y * stretch_factor);
    float noise_value = texture(noise_texture, stretched_uv).r * noise_strength;

    float gradient_height = vert_height - dissolve_start;
    gradient_height *= 1.0 / dissolve_length;
    gradient_height = clamp(pow(gradient_height, gradient_bias) + noise_value, 0.0, 1.0);

    ALPHA = mix(1.0, 0.0, gradient_height);
    ALPHA = pow(ALPHA, power_factor);
    ALBEDO = neon(pow(ALPHA, power_factor), _color);

    ALPHA = pow(ALPHA, alpha_intensity_factor);

    if (enable_fresnel) {
        float fresnel_effect = 1.0 - fresnel(fresnel_factor, NORMAL, VIEW);
        fresnel_effect = pow(fresnel_effect * fresnel_amplification, fresnel_power);

        ALPHA *= fresnel_effect;
    }
}

================
File: scenes/game_object/vfx/death_explosion.gd
================
extends Node3D
@onready var debris: GPUParticles3D = $Debris
@onready var smoke: GPUParticles3D = $Smoke
@onready var fire: GPUParticles3D = $Fire
@onready var random_stream_player_component: RandomStreamPlayerComponent = $RandomStreamPlayerComponent
@onready var shockwave: GPUParticles3D = $Shockwave

func _ready() -> void:
	debris.emitting = true
	smoke.emitting = true
	fire.emitting = true
	shockwave.emitting = true
	random_stream_player_component.play_random()
	smoke.finished.connect(_on_smoke_finished)

func _on_smoke_finished() -> void:
	queue_free()

================
File: scenes/game_object/vfx/death_explosion.tscn
================
[gd_scene load_steps=32 format=3 uid="uid://jdtu4m2snino"]

[ext_resource type="Script" path="res://scenes/game_object/vfx/death_explosion.gd" id="1_mya8q"]
[ext_resource type="PackedScene" uid="uid://cpto3ymq6nwb4" path="res://scenes/component/random_stream_player_component.tscn" id="2_q2oi1"]
[ext_resource type="AudioStream" uid="uid://cov5rhcywkxnp" path="res://assets/sounds/tspt_deep_laser_blast_01_026.mp3" id="3_w8hru"]

[sub_resource type="Curve" id="Curve_x6ym4"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(0.725904, 0.99228), 0.0, 0.0, 0, 0, Vector2(0.990964, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_exy2u"]
curve = SubResource("Curve_x6ym4")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_qk4se"]
particle_flag_align_y = true
spread = 180.0
initial_velocity_min = 40.0
initial_velocity_max = 50.0
scale_min = 0.5
scale_max = 1.5
scale_curve = SubResource("CurveTexture_exy2u")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_mihqt"]
albedo_color = Color(0.834371, 0.543238, 0.240042, 1)
emission_enabled = true
emission = Color(0.768561, 0.407977, 0.252457, 1)
emission_energy_multiplier = 2.0

[sub_resource type="CylinderMesh" id="CylinderMesh_e1lsa"]
material = SubResource("StandardMaterial3D_mihqt")
top_radius = 0.25
bottom_radius = 0.0
height = 5.0

[sub_resource type="Curve" id="Curve_q33f2"]
_data = [Vector2(0, 0.0581949), 0.0, 0.0, 0, 0, Vector2(0.626506, 1), 0.0, 0.0, 0, 0, Vector2(0.993976, 0.0890738), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_050th"]
curve = SubResource("Curve_q33f2")

[sub_resource type="Curve" id="Curve_h3bjs"]
_data = [Vector2(0, 0.081354), 0.0, 0.0, 0, 0, Vector2(0.26506, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_r8ik6"]
curve = SubResource("Curve_h3bjs")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_gkaim"]
emission_shape = 1
emission_sphere_radius = 1.0
direction = Vector3(0, 0, 0)
initial_velocity_min = 10.0
initial_velocity_max = 20.0
gravity = Vector3(0, 0, 0)
scale_min = 0.5
scale_max = 1.5
scale_curve = SubResource("CurveTexture_r8ik6")
color = Color(0.364099, 0.357332, 0.357333, 1)
alpha_curve = SubResource("CurveTexture_050th")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_22b4h"]
transparency = 1
vertex_color_use_as_albedo = true

[sub_resource type="BoxMesh" id="BoxMesh_0t7va"]
material = SubResource("StandardMaterial3D_22b4h")

[sub_resource type="Gradient" id="Gradient_1rwrm"]
offsets = PackedFloat32Array(0, 0.592105, 1)
colors = PackedColorArray(1, 1, 0, 1, 1, 0.476974, 0, 1, 1, 0, 0, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_3de4i"]
gradient = SubResource("Gradient_1rwrm")

[sub_resource type="Curve" id="Curve_1hixf"]
max_value = 2.0
_data = [Vector2(0, 2), 0.0, 0.0, 0, 0, Vector2(1, 0.965558), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_mdokw"]
curve = SubResource("Curve_1hixf")

[sub_resource type="Curve" id="Curve_tcnli"]
_data = [Vector2(0, 0.081354), 0.0, 0.0, 0, 0, Vector2(0.26506, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_l6qon"]
curve = SubResource("Curve_tcnli")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_tt5vt"]
emission_shape = 1
emission_sphere_radius = 1.0
direction = Vector3(0, 0, 0)
spread = 90.0
initial_velocity_min = 20.0
initial_velocity_max = 40.0
gravity = Vector3(0, 0, 0)
scale_min = 0.5
scale_max = 1.5
scale_curve = SubResource("CurveTexture_l6qon")
color = Color(0.960784, 0.741176, 0, 1)
color_ramp = SubResource("GradientTexture1D_3de4i")
emission_curve = SubResource("CurveTexture_mdokw")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_tfx3g"]
transparency = 1
vertex_color_use_as_albedo = true

[sub_resource type="BoxMesh" id="BoxMesh_x2yd1"]
material = SubResource("StandardMaterial3D_tfx3g")

[sub_resource type="Curve" id="Curve_c8f6w"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.156626, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_tdrfd"]
curve = SubResource("Curve_c8f6w")

[sub_resource type="Curve" id="Curve_npgre"]
_data = [Vector2(0, 0.0581949), 0.0, 0.0, 0, 0, Vector2(0.0481928, 1), 0.0, 0.0, 0, 0, Vector2(0.246988, 0), 0.0, 0.0, 0, 0, Vector2(0.349398, 0.614014), 0.0, 0.0, 0, 0, Vector2(0.521084, 0), 0.0, 0.0, 0, 0, Vector2(0.653614, 0.243468), 0.0, 0.0, 0, 0, Vector2(0.834337, 0.119953), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 8

[sub_resource type="CurveTexture" id="CurveTexture_efude"]
curve = SubResource("Curve_npgre")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_1hfe5"]
gravity = Vector3(0, 0, 0)
scale_min = 52.63
scale_max = 101.53
scale_curve = SubResource("CurveTexture_efude")
alpha_curve = SubResource("CurveTexture_tdrfd")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_uhxjd"]
transparency = 1
vertex_color_use_as_albedo = true
emission_enabled = true
emission = Color(1, 1, 1, 1)

[sub_resource type="SphereMesh" id="SphereMesh_xrdvy"]
material = SubResource("StandardMaterial3D_uhxjd")

[node name="DeathExplosion" type="Node3D"]
script = ExtResource("1_mya8q")

[node name="Debris" type="GPUParticles3D" parent="."]
emitting = false
amount = 60
lifetime = 0.5
one_shot = true
explosiveness = 1.0
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_qk4se")
draw_pass_1 = SubResource("CylinderMesh_e1lsa")

[node name="Smoke" type="GPUParticles3D" parent="."]
emitting = false
amount = 50
lifetime = 2.0
one_shot = true
explosiveness = 1.0
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_gkaim")
draw_pass_1 = SubResource("BoxMesh_0t7va")

[node name="Fire" type="GPUParticles3D" parent="."]
emitting = false
amount = 50
one_shot = true
explosiveness = 1.0
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_tt5vt")
draw_pass_1 = SubResource("BoxMesh_x2yd1")

[node name="Shockwave" type="GPUParticles3D" parent="."]
emitting = false
amount = 1
one_shot = true
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_1hfe5")
draw_pass_1 = SubResource("SphereMesh_xrdvy")

[node name="RandomStreamPlayerComponent" parent="." instance=ExtResource("2_q2oi1")]
volume_db = 3.0
unit_size = 50.0
streams = Array[AudioStream]([ExtResource("3_w8hru")])

================
File: scenes/game_object/vfx/hit_explosion.gd
================
extends Node3D

@onready var animated_sprite_3d: AnimatedSprite3D = $AnimatedSprite3D

func _ready() -> void:
	animated_sprite_3d.animation_finished.connect(animation_finished)
	animated_sprite_3d.play("default")
	
func animation_finished() -> void:
	queue_free()

================
File: scenes/game_object/vfx/hit_explosion.tscn
================
[gd_scene load_steps=20 format=3 uid="uid://bkcrjh66ip304"]

[ext_resource type="Script" path="res://scenes/game_object/vfx/hit_explosion.gd" id="1_ssor1"]
[ext_resource type="Texture2D" uid="uid://u1x83ww1qdxo" path="res://assets/Explosion.png" id="1_xlv5y"]

[sub_resource type="AtlasTexture" id="AtlasTexture_rjglf"]
atlas = ExtResource("1_xlv5y")
region = Rect2(0, 0, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_afnye"]
atlas = ExtResource("1_xlv5y")
region = Rect2(177, 0, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_t540m"]
atlas = ExtResource("1_xlv5y")
region = Rect2(354, 0, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_dhsqg"]
atlas = ExtResource("1_xlv5y")
region = Rect2(531, 0, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_qnk4h"]
atlas = ExtResource("1_xlv5y")
region = Rect2(0, 177, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_8gdrw"]
atlas = ExtResource("1_xlv5y")
region = Rect2(177, 177, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_ktb5h"]
atlas = ExtResource("1_xlv5y")
region = Rect2(354, 177, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_hcnro"]
atlas = ExtResource("1_xlv5y")
region = Rect2(531, 177, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_787bq"]
atlas = ExtResource("1_xlv5y")
region = Rect2(0, 354, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_7xe6c"]
atlas = ExtResource("1_xlv5y")
region = Rect2(177, 354, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_3pv65"]
atlas = ExtResource("1_xlv5y")
region = Rect2(354, 354, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_3pscr"]
atlas = ExtResource("1_xlv5y")
region = Rect2(531, 354, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_jd2tr"]
atlas = ExtResource("1_xlv5y")
region = Rect2(0, 531, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_fqjws"]
atlas = ExtResource("1_xlv5y")
region = Rect2(177, 531, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_ehhx0"]
atlas = ExtResource("1_xlv5y")
region = Rect2(354, 531, 177, 177)

[sub_resource type="AtlasTexture" id="AtlasTexture_deioq"]
atlas = ExtResource("1_xlv5y")
region = Rect2(531, 531, 177, 177)

[sub_resource type="SpriteFrames" id="SpriteFrames_0u32e"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_rjglf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_afnye")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_t540m")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dhsqg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qnk4h")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8gdrw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ktb5h")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_hcnro")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_787bq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7xe6c")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3pv65")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3pscr")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jd2tr")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fqjws")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ehhx0")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_deioq")
}],
"loop": false,
"name": &"default",
"speed": 24.0
}]

[node name="HitExplosion" type="Node3D"]
script = ExtResource("1_ssor1")

[node name="AnimatedSprite3D" type="AnimatedSprite3D" parent="."]
transform = Transform3D(4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0)
billboard = 1
sprite_frames = SubResource("SpriteFrames_0u32e")
frame = 15
frame_progress = 1.0

================
File: scenes/game_object/vfx/test_thrust.tscn
================
[gd_scene load_steps=8 format=3 uid="uid://edten7l16n0b"]

[sub_resource type="Gradient" id="Gradient_hi51m"]
offsets = PackedFloat32Array(0, 0.648026, 0.871711, 1)
colors = PackedColorArray(1, 0, 0, 1, 0.752941, 0.658824, 0.247059, 1, 0.427451, 0.196078, 0.572549, 1, 0, 0, 1, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_3ent4"]
gradient = SubResource("Gradient_hi51m")

[sub_resource type="Curve" id="Curve_yrlvp"]
_data = [Vector2(0, 0.374703), 0.0, 0.0, 0, 0, Vector2(0.253012, 0.884204), 0.0, 0.0, 0, 0, Vector2(0.686747, 0.359264), -1.28147, -1.28147, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 4

[sub_resource type="CurveTexture" id="CurveTexture_procp"]
curve = SubResource("Curve_yrlvp")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_gbs3y"]
particle_flag_align_y = true
emission_shape = 6
emission_ring_axis = Vector3(0, 0, 1)
emission_ring_height = 1.0
emission_ring_radius = 0.25
emission_ring_inner_radius = 0.0
emission_ring_cone_angle = 90.0
angle_min = -140.9
angle_max = 109.6
gravity = Vector3(0, 0, 5)
scale_curve = SubResource("CurveTexture_procp")
color_ramp = SubResource("GradientTexture1D_3ent4")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_rmf6i"]
transparency = 1
shading_mode = 0
vertex_color_use_as_albedo = true

[sub_resource type="BoxMesh" id="BoxMesh_mgcrg"]
material = SubResource("StandardMaterial3D_rmf6i")
size = Vector3(0.5, 0.2, 0.5)

[node name="Node3D" type="Node3D"]

[node name="GPUParticles3D" type="GPUParticles3D" parent="."]
amount = 1000
randomness = 0.5
fixed_fps = 60
trail_enabled = true
process_material = SubResource("ParticleProcessMaterial_gbs3y")
draw_pass_1 = SubResource("BoxMesh_mgcrg")

================
File: scenes/game_object/weapons/gun.gd
================
class_name Gun extends Node3D

@onready var bullet_spawner: BulletSpawner = $BulletSpawner
@onready var attack_cooldown: Timer = $AttackCooldown
@onready var random_sound_player: RandomStreamPlayerComponent = $RandomStreamPlayerComponent
@export var proj_mesh: Mesh

@export var firing_points: Array[Marker3D]
var firing_point_counter: int = 0

@export var projectile_speed: float = 750
@export var projectile_damage: float = 10
@export var faction: int = 1
@export var lifetime: float = 10

func _ready() -> void:
	attack_cooldown.wait_time = bullet_spawner.fire_rate

func shoot() -> void:
	if attack_cooldown.is_stopped():
		ProjectileServer.spawn_projectile(
			proj_mesh,
			global_transform,
			global_transform.basis.z * -100,
			projectile_speed,
			projectile_damage,
			faction,
			lifetime
		)
		#bullet_spawner.spawn_projectile()
		attack_cooldown.start()
		#random_sound_player.play_random()
		

func shoot_towards(world_pos: Vector3) -> void:
	if attack_cooldown.is_stopped():
		var fire_from: Vector3 = firing_points[firing_point_counter].global_position if firing_points.size() > 0 else global_position
		var direction: Vector3 = (world_pos - fire_from).normalized()
		var to_qt: Quaternion = Util.qt_look_at(-direction,global_basis.y)
		var towards: Transform3D = Transform3D(Basis(to_qt),fire_from)
		ProjectileServer.spawn_projectile(
			proj_mesh,
			towards,
			world_pos,
			projectile_speed,
			projectile_damage,
			faction,
			lifetime
		)
		attack_cooldown.start()
		random_sound_player.play_random()
		firing_point_counter = (firing_point_counter + 1) % firing_points.size()

================
File: scenes/game_object/weapons/gun.tscn
================
[gd_scene load_steps=7 format=3 uid="uid://duhryesqv6mm8"]

[ext_resource type="Script" path="res://scenes/game_object/weapons/gun.gd" id="1_kthce"]
[ext_resource type="BoxMesh" uid="uid://br1lq61hfnuct" path="res://scenes/game_object/projectile/projectile_mesh.tres" id="2_0vsqb"]
[ext_resource type="PackedScene" uid="uid://gep8kx3gilo" path="res://scenes/component/bullet_spawner.tscn" id="2_whqxq"]
[ext_resource type="PackedScene" uid="uid://biqgfh3vefxmj" path="res://scenes/game_object/projectile/projectile.tscn" id="3_w4j8y"]
[ext_resource type="PackedScene" uid="uid://cpto3ymq6nwb4" path="res://scenes/component/random_stream_player_component.tscn" id="4_yvxb7"]
[ext_resource type="AudioStream" uid="uid://4ejbwm66smx0" path="res://assets/sounds/gun1.mp3" id="5_1qx13"]

[node name="Gun" type="Node3D" node_paths=PackedStringArray("firing_points")]
script = ExtResource("1_kthce")
proj_mesh = ExtResource("2_0vsqb")
firing_points = [NodePath("Marker3D"), NodePath("Marker3D2")]
projectile_speed = 100.0

[node name="BulletSpawner" parent="." instance=ExtResource("2_whqxq")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -7)
fire_rate = 0.3
projectile_scene = ExtResource("3_w4j8y")

[node name="AttackCooldown" type="Timer" parent="."]
one_shot = true

[node name="RandomStreamPlayerComponent" parent="." instance=ExtResource("4_yvxb7")]
doppler_tracking = 0
streams = Array[AudioStream]([ExtResource("5_1qx13")])
min_pitch = 0.8
max_pitch = 1.2

[node name="Marker3D" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3.33463, 0, -1.82676)

[node name="Marker3D2" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3.2109, 0, -1.54222)

================
File: scenes/game_object/weapons/laser_gun.gd
================
class_name LaserGun extends Node3D

@onready var ray_cast_3d: RayCast3D = $RayCast3D
@onready var attack_cooldown: Timer = $AttackCooldown
@onready var random_sound_player: RandomStreamPlayerComponent = $RandomStreamPlayerComponent
@onready var laser: MeshInstance3D = $MeshInstance3D

@export var firing_points: Array[Marker3D]
var firing_point_counter: int = 0
var fire_rate: float = 0.5
var damage: float = 10

func _ready() -> void:
	attack_cooldown.wait_time = fire_rate

func shoot() -> void:
	if attack_cooldown.is_stopped():

		attack_cooldown.start()
		random_sound_player.play_random()
		

func shoot_towards(world_pos: Vector3) -> void:
	if attack_cooldown.is_stopped():
		var fire_from: Vector3 = firing_points[firing_point_counter].global_position if firing_points.size() > 0 else global_position
		var direction: Vector3 = (world_pos - fire_from)
		ray_cast_3d.target_position = direction
		ray_cast_3d.force_raycast_update()
		if ray_cast_3d.is_colliding():
			var hurtbox: Hurtbox = ray_cast_3d.get_collider() as Hurtbox
			if hurtbox != null:
				hurtbox.health_component.damage(10)
		attack_cooldown.start()
		random_sound_player.play_random()
		firing_point_counter = (firing_point_counter + 1) % firing_points.size()

func draw_laser(from: Vector3, to: Vector3) -> void:
	laser.global_position = from
	var box: BoxMesh = (laser.mesh as BoxMesh)
	box.size.z = (to-from).length()

================
File: scenes/game_object/weapons/laser_gun.tscn
================
[gd_scene load_steps=4 format=3 uid="uid://dq0r4hdmnq3yr"]

[ext_resource type="PackedScene" uid="uid://cpto3ymq6nwb4" path="res://scenes/component/random_stream_player_component.tscn" id="1_2hknl"]
[ext_resource type="Script" path="res://scenes/game_object/weapons/laser_gun.gd" id="1_ltrqp"]
[ext_resource type="AudioStream" uid="uid://4ejbwm66smx0" path="res://assets/sounds/gun1.mp3" id="2_ofq0j"]

[node name="LaserGun" type="Node3D"]
script = ExtResource("1_ltrqp")

[node name="AttackCooldown" type="Timer" parent="."]
one_shot = true

[node name="RandomStreamPlayerComponent" parent="." instance=ExtResource("1_2hknl")]
doppler_tracking = 0
streams = Array[AudioStream]([ExtResource("2_ofq0j")])
min_pitch = 0.8
max_pitch = 1.2

[node name="Marker3D" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.51015, 0, 0)

[node name="Marker3D2" type="Marker3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.51, 0, 0)

[node name="RayCast3D" type="RayCast3D" parent="."]
enabled = false
target_position = Vector3(0, 0, -500)
collide_with_areas = true
collide_with_bodies = false

================
File: scenes/test_hitbox.gd
================
extends MeshInstance3D




func _on_hurtbox_body_shape_entered(body_rid: RID, body: Node3D, body_shape_index: int, local_shape_index: int) -> void:
	print("help")

================
File: scenes/test_scene.gd
================
extends Node3D

@onready var box: PackedScene = preload("res://scenes/csg_mesh_3d.tscn")
@export var enemy: PackedScene


func _ready() -> void:
	var box_scale: int = 5000
	Input.mouse_mode = Input.MOUSE_MODE_CONFINED_HIDDEN
	for i in 2000:
		var new_box: Node3D = box.instantiate()
		new_box.position = Vector3(box_scale *randf() -box_scale*0.5, box_scale *randf() -box_scale*0.5, box_scale *randf() -box_scale*0.5)
		add_child(new_box)
	for i in 200:
		var new_npc: Ship = enemy.instantiate()
		new_npc.position = Vector3(box_scale *randf() -box_scale*0.5, box_scale *randf() -box_scale*0.5, box_scale *randf() -box_scale*0.5)
		add_child(new_npc)
		new_npc.pilot.faction = Pilot.FACTION.FRIENDLY if randf() < 0.5 else Pilot.FACTION.ENEMY


func _input(event: InputEvent) -> void:
	if event.is_action_pressed("ui_cancel"):
			get_tree().quit()

================
File: scenes/test_scene.tscn
================
[gd_scene load_steps=15 format=3 uid="uid://bsd7eynfdxon4"]

[ext_resource type="PackedScene" uid="uid://c8ps4kffu7ucb" path="res://scenes/game_object/ship/player_ship.tscn" id="1_45yrv"]
[ext_resource type="Script" path="res://scenes/test_scene.gd" id="1_iuwce"]
[ext_resource type="PackedScene" uid="uid://cxkwdhwvmgfxv" path="res://scenes/game_object/ship/npc_ship.tscn" id="2_fgphr"]
[ext_resource type="PackedScene" uid="uid://diw52h5jif8v2" path="res://scenes/game_object/ship_camera/camera_rig.tscn" id="2_mr3ih"]
[ext_resource type="PackedScene" uid="uid://yl7uwjkjbml" path="res://scenes/csg_mesh_3d.tscn" id="4_u7a81"]
[ext_resource type="Script" path="res://scenes/test_hitbox.gd" id="6_lhw6p"]
[ext_resource type="PackedScene" uid="uid://b8ha4ultrkxnb" path="res://scenes/component/hurtbox.tscn" id="7_lfjvl"]
[ext_resource type="PackedScene" uid="uid://dmtst8fnji83l" path="res://scenes/component/health_component.tscn" id="7_q1nph"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_wpg4i"]
sky_top_color = Color(0.0627451, 0.0470588, 0.109804, 1)
sky_horizon_color = Color(0.0627451, 0.0470588, 0.109804, 1)
sky_curve = 0.15529
ground_bottom_color = Color(0.0627451, 0.0470588, 0.109804, 1)
ground_horizon_color = Color(0.0627451, 0.0470588, 0.109804, 1)
ground_curve = 223.812
sun_angle_max = 32.02
sun_curve = 0.197926

[sub_resource type="Sky" id="Sky_a213p"]
sky_material = SubResource("ProceduralSkyMaterial_wpg4i")

[sub_resource type="Environment" id="Environment_f7duf"]
background_mode = 2
sky = SubResource("Sky_a213p")
reflected_light_source = 1
tonemap_mode = 2
sdfgi_use_occlusion = true
fog_mode = 1
fog_density = 1.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_wf82s"]
resource_local_to_scene = true

[sub_resource type="BoxMesh" id="BoxMesh_kedbn"]
size = Vector3(20, 20, 20)

[sub_resource type="BoxShape3D" id="BoxShape3D_o7hl5"]
size = Vector3(21, 21, 21)

[node name="TestScene" type="Node3D"]
script = ExtResource("1_iuwce")
enemy = ExtResource("2_fgphr")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_f7duf")

[node name="CameraRig" parent="." node_paths=PackedStringArray("ship") instance=ExtResource("2_mr3ih")]
ship = NodePath("../Ship")
fancy_cam = true
horizontal_turn_angle = 0.65

[node name="CSGMesh3D" parent="." instance=ExtResource("4_u7a81")]
material = SubResource("StandardMaterial3D_wf82s")

[node name="Ship" parent="." instance=ExtResource("1_45yrv")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 14.26, 0)

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -282.155)
mesh = SubResource("BoxMesh_kedbn")
skeleton = NodePath("")
script = ExtResource("6_lhw6p")

[node name="HealthComponent" parent="MeshInstance3D" instance=ExtResource("7_q1nph")]

[node name="Hurtbox" parent="MeshInstance3D" node_paths=PackedStringArray("health_component") instance=ExtResource("7_lfjvl")]
collision_layer = 252
collision_mask = 252
health_component = NodePath("../HealthComponent")

[node name="CollisionShape3D" type="CollisionShape3D" parent="MeshInstance3D/Hurtbox"]
shape = SubResource("BoxShape3D_o7hl5")

[connection signal="body_shape_entered" from="MeshInstance3D/Hurtbox" to="MeshInstance3D" method="_on_hurtbox_body_shape_entered"]

[editable path="CameraRig"]

================
File: scenes/test_scene.tscn113278277755.tmp
================
[gd_scene load_steps=9 format=3 uid="uid://bsd7eynfdxon4"]

[ext_resource type="PackedScene" uid="uid://c8ps4kffu7ucb" path="res://scenes/game_object/ship/ship.tscn" id="1_45yrv"]
[ext_resource type="Script" path="res://scenes/test_scene.gd" id="1_iuwce"]
[ext_resource type="PackedScene" uid="uid://diw52h5jif8v2" path="res://scenes/game_object/ship_camera/camera_rig.tscn" id="2_mr3ih"]
[ext_resource type="PackedScene" uid="uid://yl7uwjkjbml" path="res://scenes/csg_mesh_3d.tscn" id="4_u7a81"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_evedt"]
sky_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)
ground_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)

[sub_resource type="Sky" id="Sky_ksuv2"]
sky_material = SubResource("ProceduralSkyMaterial_evedt")

[sub_resource type="Environment" id="Environment_f7duf"]
background_mode = 2
sky = SubResource("Sky_ksuv2")
tonemap_mode = 2
glow_enabled = true

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_wf82s"]
resource_local_to_scene = true

[node name="TestScene" type="Node3D"]
script = ExtResource("1_iuwce")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_f7duf")

[node name="Ship" parent="." instance=ExtResource("1_45yrv")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 34.945, 0)

[node name="CameraRig" parent="." node_paths=PackedStringArray("ship") instance=ExtResource("2_mr3ih")]
ship = NodePath("../Ship")
fancy_cam = true

[node name="RayCast3D" type="RayCast3D" parent="CameraRig/LookAheadRig/MainCamera" index="1"]
target_position = Vector3(5, 0, 0)
debug_shape_custom_color = Color(0.225711, 0.616674, 0.463903, 1)
debug_shape_thickness = 5

[node name="RayCast3D2" type="RayCast3D" parent="CameraRig/LookAheadRig/MainCamera" index="2"]
target_position = Vector3(0, 5, 0)
debug_shape_custom_color = Color(0.225711, 0.616674, 0.463903, 1)
debug_shape_thickness = 5

[node name="RayCast3D3" type="RayCast3D" parent="CameraRig/LookAheadRig/MainCamera" index="3"]
target_position = Vector3(0, 0, 5)
debug_shape_custom_color = Color(1, 0.274737, 0.509547, 1)
debug_shape_thickness = 5

[node name="RayCast3D" type="RayCast3D" parent="CameraRig/LookAheadRig" index="1"]
target_position = Vector3(5, 0, 0)
debug_shape_custom_color = Color(0.407748, 0.509334, 0.865282, 1)
debug_shape_thickness = 5

[node name="RayCast3D2" type="RayCast3D" parent="CameraRig/LookAheadRig" index="2"]
target_position = Vector3(0, 5, 0)
debug_shape_custom_color = Color(0.407748, 0.509334, 0.865282, 1)
debug_shape_thickness = 5

[node name="RayCast3D3" type="RayCast3D" parent="CameraRig/LookAheadRig" index="3"]
target_position = Vector3(0, 0, 5)
debug_shape_custom_color = Color(0.407748, 0.509334, 0.865282, 1)
debug_shape_thickness = 5

[node name="CanvasLayer" type="CanvasLayer" parent="CameraRig"]
visible = false

[node name="SubViewportContainer" type="SubViewportContainer" parent="CameraRig/CanvasLayer"]
offset_left = 52.0
offset_top = 276.0
offset_right = 652.0
offset_bottom = 776.0

[node name="SubViewport" type="SubViewport" parent="CameraRig/CanvasLayer/SubViewportContainer"]
handle_input_locally = false
size = Vector2i(600, 500)
render_target_update_mode = 0

[node name="Cam" type="Node3D" parent="CameraRig/CanvasLayer/SubViewportContainer/SubViewport"]

[node name="Camera3D" type="Camera3D" parent="CameraRig/CanvasLayer/SubViewportContainer/SubViewport/Cam"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 28.1809, 0, 12.8714)
fov = 98.1

[node name="RayCast3D" type="RayCast3D" parent="CameraRig"]
target_position = Vector3(5, 0, 0)
debug_shape_custom_color = Color(1, 0, 0, 1)
debug_shape_thickness = 5

[node name="RayCast3D2" type="RayCast3D" parent="CameraRig"]
target_position = Vector3(0, 5, 0)
debug_shape_custom_color = Color(1, 0, 0, 1)
debug_shape_thickness = 5

[node name="RayCast3D3" type="RayCast3D" parent="CameraRig"]
target_position = Vector3(0, 0, 5)
debug_shape_custom_color = Color(1, 0, 0, 1)
debug_shape_thickness = 5

[node name="CSGMesh3D" parent="." instance=ExtResource("4_u7a81")]
material = SubResource("StandardMaterial3D_wf82s")

[editable path="CameraRig"]

================
File: scenes/test_scene.tscn8229259060.tmp
================
[gd_scene load_steps=9 format=3 uid="uid://bsd7eynfdxon4"]

[ext_resource type="Script" path="res://scenes/test_scene.gd" id="1_iuwce"]
[ext_resource type="PackedScene" uid="uid://cxkwdhwvmgfxv" path="res://scenes/game_object/ship/npc_ship.tscn" id="2_fgphr"]
[ext_resource type="PackedScene" uid="uid://diw52h5jif8v2" path="res://scenes/game_object/ship_camera/camera_rig.tscn" id="2_mr3ih"]
[ext_resource type="PackedScene" uid="uid://yl7uwjkjbml" path="res://scenes/csg_mesh_3d.tscn" id="4_u7a81"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_wpg4i"]
sky_top_color = Color(0.0627451, 0.0470588, 0.109804, 1)
sky_horizon_color = Color(0.0627451, 0.0470588, 0.109804, 1)
sky_curve = 0.15529
ground_bottom_color = Color(0.0627451, 0.0470588, 0.109804, 1)
ground_horizon_color = Color(0.0627451, 0.0470588, 0.109804, 1)
ground_curve = 223.812
sun_angle_max = 32.02
sun_curve = 0.197926

[sub_resource type="Sky" id="Sky_a213p"]
sky_material = SubResource("ProceduralSkyMaterial_wpg4i")

[sub_resource type="Environment" id="Environment_f7duf"]
background_mode = 2
sky = SubResource("Sky_a213p")
reflected_light_source = 1
tonemap_mode = 2
sdfgi_use_occlusion = true
fog_mode = 1
fog_density = 1.0

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_wf82s"]
resource_local_to_scene = true

[node name="TestScene" type="Node3D"]
script = ExtResource("1_iuwce")
enemy = ExtResource("2_fgphr")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_f7duf")

[node name="CameraRig" parent="." node_paths=PackedStringArray("ship") instance=ExtResource("2_mr3ih")]
ship = NodePath("")
fancy_cam = true

[node name="CSGMesh3D" parent="." instance=ExtResource("4_u7a81")]
material = SubResource("StandardMaterial3D_wf82s")

[editable path="CameraRig"]

================
File: scenes/test_scene.tscn87138360955.tmp
================
[gd_scene load_steps=8 format=3 uid="uid://bsd7eynfdxon4"]

[ext_resource type="PackedScene" uid="uid://c8ps4kffu7ucb" path="res://scenes/game_object/ship/ship.tscn" id="1_45yrv"]
[ext_resource type="Script" path="res://scenes/test_scene.gd" id="1_iuwce"]
[ext_resource type="PackedScene" uid="uid://diw52h5jif8v2" path="res://scenes/game_object/ship_camera/camera_rig.tscn" id="2_mr3ih"]
[ext_resource type="PackedScene" uid="uid://yl7uwjkjbml" path="res://scenes/csg_mesh_3d.tscn" id="4_u7a81"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_evedt"]
sky_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)
ground_horizon_color = Color(0.64625, 0.65575, 0.67075, 1)

[sub_resource type="Sky" id="Sky_ksuv2"]
sky_material = SubResource("ProceduralSkyMaterial_evedt")

[sub_resource type="Environment" id="Environment_f7duf"]
background_mode = 2
sky = SubResource("Sky_ksuv2")
tonemap_mode = 2
glow_enabled = true

[node name="TestScene" type="Node3D"]
script = ExtResource("1_iuwce")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_f7duf")

[node name="Ship" parent="." instance=ExtResource("1_45yrv")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 34.945, 0)

[node name="CameraRig" parent="." node_paths=PackedStringArray("ship") instance=ExtResource("2_mr3ih")]
ship = NodePath("../Ship")
fancy_cam = true

[node name="RayCast3D2" type="RayCast3D" parent="CameraRig/LookAheadRig/MainCamera/Camera3D" index="1"]
target_position = Vector3(5, 0, 0)
debug_shape_custom_color = Color(0.584502, 0.549035, 5.77569e-07, 1)
debug_shape_thickness = 5

[node name="RayCast3D3" type="RayCast3D" parent="CameraRig/LookAheadRig/MainCamera/Camera3D" index="2"]
target_position = Vector3(0, 5, 0)
debug_shape_custom_color = Color(0.584502, 0.549035, 5.77569e-07, 1)
debug_shape_thickness = 5

[node name="RayCast3D4" type="RayCast3D" parent="CameraRig/LookAheadRig/MainCamera/Camera3D" index="3"]
target_position = Vector3(0, 0, 5)
debug_shape_custom_color = Color(0.584502, 0.549035, 5.77569e-07, 1)
debug_shape_thickness = 5

[node name="RayCast3D" type="RayCast3D" parent="CameraRig/LookAheadRig/MainCamera" index="1"]
target_position = Vector3(5, 0, 0)
debug_shape_custom_color = Color(0.225711, 0.616674, 0.463903, 1)
debug_shape_thickness = 5

[node name="RayCast3D2" type="RayCast3D" parent="CameraRig/LookAheadRig/MainCamera" index="2"]
target_position = Vector3(0, 5, 0)
debug_shape_custom_color = Color(0.225711, 0.616674, 0.463903, 1)
debug_shape_thickness = 5

[node name="RayCast3D3" type="RayCast3D" parent="CameraRig/LookAheadRig/MainCamera" index="3"]
target_position = Vector3(0, 0, 5)
debug_shape_custom_color = Color(0.225711, 0.616674, 0.463903, 1)
debug_shape_thickness = 5

[node name="RayCast3D" type="RayCast3D" parent="CameraRig/LookAheadRig" index="1"]
target_position = Vector3(5, 0, 0)
debug_shape_custom_color = Color(0.407748, 0.509334, 0.865282, 1)
debug_shape_thickness = 5

[node name="RayCast3D2" type="RayCast3D" parent="CameraRig/LookAheadRig" index="2"]
target_position = Vector3(0, 5, 0)
debug_shape_custom_color = Color(0.407748, 0.509334, 0.865282, 1)
debug_shape_thickness = 5

[node name="RayCast3D3" type="RayCast3D" parent="CameraRig/LookAheadRig" index="3"]
target_position = Vector3(0, 0, 5)
debug_shape_custom_color = Color(0.407748, 0.509334, 0.865282, 1)
debug_shape_thickness = 5

[node name="CanvasLayer" type="CanvasLayer" parent="CameraRig"]

[node name="SubViewportContainer" type="SubViewportContainer" parent="CameraRig/CanvasLayer"]
offset_left = 52.0
offset_top = 276.0
offset_right = 652.0
offset_bottom = 776.0

[node name="SubViewport" type="SubViewport" parent="CameraRig/CanvasLayer/SubViewportContainer"]
handle_input_locally = false
size = Vector2i(600, 500)
render_target_update_mode = 4

[node name="Cam" type="Node3D" parent="CameraRig/CanvasLayer/SubViewportContainer/SubViewport"]

[node name="Camera3D" type="Camera3D" parent="CameraRig/CanvasLayer/SubViewportContainer/SubViewport/Cam"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 28.1809, 0, 12.8714)
fov = 98.1

[node name="RayCast3D" type="RayCast3D" parent="CameraRig"]
target_position = Vector3(5, 0, 0)
debug_shape_custom_color = Color(1, 0, 0, 1)
debug_shape_thickness = 5

[node name="RayCast3D2" type="RayCast3D" parent="CameraRig"]
target_position = Vector3(0, 5, 0)
debug_shape_custom_color = Color(1, 0, 0, 1)
debug_shape_thickness = 5

[node name="RayCast3D3" type="RayCast3D" parent="CameraRig"]
target_position = Vector3(0, 0, 5)
debug_shape_custom_color = Color(1, 0, 0, 1)
debug_shape_thickness = 5

[node name="CSGMesh3D" parent="." instance=ExtResource("4_u7a81")]

[editable path="CameraRig"]

================
File: scripts/pid.gd
================
class_name PID extends RefCounted

var p_factor: float
var i_factor: float
var d_factor: float

var integral: float
var last_error: float

var print_counter: float = 0

func _init(_p_factor: float, _i_factor: float, _d_factor: float) -> void:
	p_factor = _p_factor
	i_factor = _i_factor
	d_factor = _d_factor
	
	
#Sort of big issue with I, if you turn in one direction for a long time, your I will add up such that if you turn in a different direction, you will still be turning towards the
#previous direction for a while. Maybe reset I if the sign of the error is different than the last error?

func update(set_point: float, actual: float, delta: float) -> float:
	var present: float = set_point - actual
	if is_zero_approx(present):
		present = 0
	if !(last_error * present > 1):
		integral *= 0.5
	integral += present * delta
	var deriv: float = (present - last_error) / delta
	last_error = present
	return present * p_factor + integral * i_factor + deriv * d_factor

func set_p(new_p:float) -> void:
	p_factor = new_p
func set_i(new_i:float) -> void:
	i_factor = new_i
func set_d(new_d:float) -> void:
	d_factor = new_d

================
File: scripts/proj_data.gd
================
class_name ProjectileData extends RefCounted

var body: RID
var shape: RID
var multimesh: MultiMesh
var instance_id: int
var velocity: Vector3
var damage: float
var faction: int
var start_pos: Vector3
var lifetime: float
var lived: float

================
File: scripts/ship_data.gd
================
class_name ShipData extends Resource

@export var health: int = 100
@export var mass: float = 100

@export var speed: Vector3 = Vector3(100,100,100)
@export var torque: Vector3 = Vector3(100,100,100)

@export var linear_drag: float = 2
@export var ang_drag: float = 5

@export var accel: float = 0.5

================
File: scripts/Util.gd
================
extends Object
class_name Util

# Smoothly rotates from one Quat to another, frame-rate independent.
static func qt_damp(from: Quaternion, to: Quaternion, speed: float, dt: float) -> Quaternion:
	return from.slerp(to, 1.0 - exp(-speed * dt))

# Smoothly moves from one Vector3 to another, frame-rate independent.
static func move_vector3(from: Vector3, to: Vector3, speed: float, dt: float) -> Vector3:
	return from.lerp(to, 1.0 - exp(-speed * dt))

# Smoothly moves from one Vector2 to another, frame-rate independent.
static func move_vector2(from: Vector2, to: Vector2, speed: float, dt: float) -> Vector2:
	return from.lerp(to, 1.0 - exp(-speed * dt))

# Smoothly moves from one float to another, frame-rate independent.
static func move_float(from: float, to: float, speed: float, dt: float) -> float:
	return lerp(from, to, 1.0 - exp(-speed * dt))

static func qt_look_at(forward: Vector3, up: Vector3) -> Quaternion:
	var f: Vector3 = forward.normalized()
	var r: Vector3 = up.cross(forward)
	var u: Vector3 = f.cross(r)
	#Ensure orthonormalality
	var m00: float = r.x
	var m01: float = r.y
	var m02: float = r.z
	var m10: float = u.x
	var m11: float = u.y
	var m12: float = u.z
	var m20: float = f.x
	var m21: float = f.y
	var m22: float = f.z
	
	var q: Quaternion = Quaternion.IDENTITY
	var trace: float = m00 + m11 + m22
	
	if trace > 0:
		var s: float = 0.5 / sqrt(trace + 1)
		q.w = 0.25 / s
		q.x = (m12 - m21) * s
		q.y = (m20 - m02) * s
		q.z = (m01 - m10) * s
		return q.normalized()
	elif ((m00 >= m11) && (m00 >= m22)):
		var s: float = 2 * sqrt(1 + m00 - m11 - m22)
		q.x = 0.25 * s
		q.y = (m01 + m10) / s
		q.z = (m02 + m20) /s
		q.w = (m12 - m21) / s
		return q.normalized()
	elif (m11 > m22):
		var s: float = 2* sqrt(1 + m11 - m00 - m22)
		q.x = (m10 + m01) / s
		q.y = 0.25 * s
		q.z = (m21 + m12) / s
		q.w = (m20 - m02) / s
		return q.normalized()
	else:
		var s: float = 2 * sqrt(1 + m22 - m00 - m11)
		q.x = (m20 + m02) / s
		q.y = (m21 + m12) / s
		q.z = 0.25 * s
		q.w = (m01 - m10) / s
		return q.normalized()
		

static func calculate_lead(from: RigidBody3D, to: RigidBody3D, muzzle_velocity: float) -> Vector3:
	var relative_pos: Vector3 = to.global_position - from.global_position
	var relative_vel: Vector3 = to.linear_velocity - from.linear_velocity
	
	var time_to_hit: float = solve_intercept(relative_pos,relative_vel,muzzle_velocity)
	
	var lead: Vector3 = to.global_position + (to.linear_velocity * time_to_hit)
	return lead
	


	

static func solve_intercept(relative_pos: Vector3, relative_vel: Vector3, projectile_speed: float) -> float:
	var a: float = relative_vel.dot(relative_vel) - (projectile_speed ** 2)
	var b: float = 2 * relative_vel.dot(relative_pos)
	var c: float = relative_pos.dot(relative_pos)
	
	var p: float = -b / (2 * a)
	var q: float = sqrt((b*b) - 4 * a * c) / (2 * a)
	
	var t1: float = p - q
	var t2: float = p + q
	var time: float = t2 if (t1 > t2 && t2 > 0) else t1
	return time
	
	





static func uniform_random_vector() -> Vector3:
	var phi: float = randf_range(0,TAU)
	var costheta: float = randf_range(-1,1)
	var theta: float = acos(costheta)
	return Vector3(
		sin(theta) * cos(phi),
		sin(theta) * sin(phi),
		cos(theta)
		)
